{"meta":
  {"status":200,"msg":"OK"},
  "response":
    {"blog":
      {"ask":true,
        "ask_anon":true,
        "ask_page_title":"Ask me anything",
      "can_chat":false,
        "can_subscribe":false,
      "description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************",
      "is_nsfw":false,
        "likes":9201,
        "name":"tyb",
        "posts":6453,
        "share_likes":true,
      "submission_page_title":"SUBMIT",
        "subscribed":false,
      "title":"tyb",
        "total_posts":6453,
        "updated":1559996560,
      "url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","is_optout_ads":false},

      "posts":[{"type":"text","blog_name":"tyb",
        "blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************",
          "url":"https://tyb.tumblr.com/",
          "uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},
        "id":154757841016,
        "post_url":"https://tyb.tumblr.com/post/154757841016/big-five-personality-traits",
        "slug":"big-five-personality-traits",
        "date":"2016-12-21 09:00:38 GMT",
        "timestamp":1482310838,
        "state":"published",
        "format":"html",
        "reblog_key":"BCQKChXt",
        "tags":[],
        "short_url":"https://tmblr.co/ZNF0Fy2G8IK1u",
        "summary":"Big Five Personality Traits:",
        "should_open_in_legacy":false,
        "recommended_source":null,
        "recommended_color":null,
        "note_count":3170,
        "source_url":"https://ohpsychology.tumblr.com/post/29674990221/big-five-personality-traits",
        "source_title":"ohpsychology",
        "title":"Big Five Personality Traits:",
        "body":"<p><a class=\"tumblr_blog\" href=\"http://ohpsychology.tumblr.com/post/29674990221\" target=\"_blank\">ohpsychology</a>:</p><blockquote>\n<p>In contemporary psychology, the “Big Five” factors (or Five Factor Model; FFM) of personality are five broad domains or dimensions of personality which are used to describe human personality. They are:</p>\n<p><strong>Openness </strong>– (inventive / curious vs. consistent / cautious). Appreciation for art, emotion, adventure, unusual ideas, curiosity, and variety of experience.<br/><strong>Conscientiousness </strong>– (efficient / organized vs. easy-going / careless). A tendency to show self-discipline, act dutifully, and aim for achievement; planned rather than spontaneous behavior.<br/><strong>Extraversion</strong> – (outgoing / energetic vs. shy / reserved). Energy, positive emotions, surgency, and the tendency to seek stimulation in the company of others.<br/><strong>Agreeableness</strong> – (friendly / compassionate vs. cold / unkind). A tendency to be compassionate and cooperative rather than suspicious and antagonistic towards others.<br/><strong>Neuroticism</strong> – (sensitive / nervous vs. secure / confident). A tendency to experience unpleasant emotions easily, such as anger, anxiety, depression, or vulnerability.</p>\n</blockquote>",
        "reblog":{"comment":"","tree_html":"<p><a class=\"tumblr_blog\" href=\"http://ohpsychology.tumblr.com/post/29674990221\" target=\"_blank\">ohpsychology</a>:</p>\n<blockquote>\n<p>In contemporary psychology, the “Big Five” factors (or Five Factor Model; FFM) of personality are five broad domains or dimensions of personality which are used to describe human personality. They are:</p>\n<p><strong>Openness </strong>– (inventive / curious vs. consistent / cautious). Appreciation for art, emotion, adventure, unusual ideas, curiosity, and variety of experience.<br><strong>Conscientiousness </strong>– (efficient / organized vs. easy-going / careless). A tendency to show self-discipline, act dutifully, and aim for achievement; planned rather than spontaneous behavior.<br><strong>Extraversion</strong> – (outgoing / energetic vs. shy / reserved). Energy, positive emotions, surgency, and the tendency to seek stimulation in the company of others.<br><strong>Agreeableness</strong> – (friendly / compassionate vs. cold / unkind). A tendency to be compassionate and cooperative rather than suspicious and antagonistic towards others.<br><strong>Neuroticism</strong> – (sensitive / nervous vs. secure / confident). A tendency to experience unpleasant emotions easily, such as anger, anxiety, depression, or vulnerability.</p>\n</blockquote>"},"trail":[{"blog":{"name":"ohpsychology","active":true,"theme":{"avatar_shape":"square","background_color":"#FAFAFA","body_font":"Helvetica Neue","header_bounds":"","header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04_focused_v3.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04_focused_v3.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"29674990221"},"content_raw":"<p>In contemporary psychology, the “Big Five” factors (or Five Factor Model; FFM) of personality are five broad domains or dimensions of personality which are used to describe human personality. They are:</p>\n<p><strong>Openness </strong>– (inventive / curious vs. consistent / cautious). Appreciation for art, emotion, adventure, unusual ideas, curiosity, and variety of experience.<br><strong>Conscientiousness </strong>– (efficient / organized vs. easy-going / careless). A tendency to show self-discipline, act dutifully, and aim for achievement; planned rather than spontaneous behavior.<br><strong>Extraversion</strong> – (outgoing / energetic vs. shy / reserved). Energy, positive emotions, surgency, and the tendency to seek stimulation in the company of others.<br><strong>Agreeableness</strong> – (friendly / compassionate vs. cold / unkind). A tendency to be compassionate and cooperative rather than suspicious and antagonistic towards others.<br><strong>Neuroticism</strong> – (sensitive / nervous vs. secure / confident). A tendency to experience unpleasant emotions easily, such as anger, anxiety, depression, or vulnerability.</p>","content":"<p>In contemporary psychology, the &ldquo;Big Five&rdquo; factors (or Five Factor Model; FFM) of personality are five broad domains or dimensions of personality which are used to describe human personality. They are:</p>\n<p><strong>Openness&nbsp;</strong>&ndash; (inventive / curious vs. consistent / cautious). Appreciation for art, emotion, adventure, unusual ideas, curiosity, and variety of experience.<br /><strong>Conscientiousness&nbsp;</strong>&ndash; (efficient / organized vs. easy-going / careless). A tendency to show self-discipline, act dutifully, and aim for achievement; planned rather than spontaneous behavior.<br /><strong>Extraversion</strong>&nbsp;&ndash; (outgoing / energetic vs. shy / reserved). Energy, positive emotions, surgency, and the tendency to seek stimulation in the company of others.<br /><strong>Agreeableness</strong>&nbsp;&ndash; (friendly / compassionate vs. cold / unkind). A tendency to be compassionate and cooperative rather than suspicious and antagonistic towards others.<br /><strong>Neuroticism</strong>&nbsp;&ndash; (sensitive / nervous vs. secure / confident). A tendency to experience unpleasant emotions easily, such as anger, anxiety, depression, or vulnerability.</p>","is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},
      "id":145461734776,"post_url":"https://tyb.tumblr.com/post/145461734776/what-is-lambda-calculus-in-laymans-terms","slug":"what-is-lambda-calculus-in-laymans-terms","date":"2016-06-05 17:27:11 GMT","timestamp":1465147631,"state":"published","format":"html","reblog_key":"qSQY7GkU","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27UCUru","summary":"What is Lambda Calculus in layman's terms?","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":4,"title":"What is Lambda Calculus in layman's terms?","body":"What is Lambda Calculus in layman&rsquo;s terms? by Robert Harper<br/><br/>Answer by Robert Harper:<blockquote><p class=\"qtext_para\">There are two important models of computation, the lambda calculus and all the others.  </p><p class=\"qtext_para\">The &ldquo;others&rdquo; are all &ldquo;machine models&rdquo; that differ from one another in uninteresting ways; they are all based on the idea of a program acting on data by modification.  So a TM consists of a program (the finite control) acting on the data (the so-called tape).  A RAM consists of a program (machine language) acting on the data (in memory).  And so on.  The machine-based models are inherently imperative, and offer no notion of composition of programs from parts.  It&rsquo;s all &ldquo;first-order&rdquo;; programs are not data, data does not contain programs.  (Yes, I am aware of encodings, but those are not programs, those are representations of programs as data.) </p><p class=\"qtext_para\">The lambda calculus is the sole &ldquo;language model&rdquo;.  It is markedly different from machine models because it is based on one of the most important inventions of the human mind, the concept of a variable in mathematics (which is not at all related to the concept of a &ldquo;variable&rdquo;, a misnomer for &ldquo;assignables&rdquo; in imperative programming languages and machine models).  A variable is given meaning by substitution, which captures the concept of composition of a whole from parts.  There is no separation of program from data; the lambda calculus is inherently &ldquo;higher order&rdquo;.  And it does not rely in any way on modification of storage or data, giving rise to much greater flexibility in programming.  And the lambda calculus is utterly trivial to define, it has variables, functions, and applications, that&rsquo;s it.</p><p class=\"qtext_para\">The sole virtue of the machine models is their psychological motivation as given by Turing shortly after Church defined computation using the lambda calculus.  Turing&rsquo;s formulation makes clear that computation is a faculty of the human mind, and that we externalize it using computers.  This view gave rise to the field of Artificial Intelligence, in which Turing was interested from the start.  The machine models have no practical uses at all.  There is no such thing as software development using Turing machines, because there cannot be &mdash; there is no notion of composition, so no libraries, no shared code, no reuse, no abstraction, nothing.  It&rsquo;s worthless from a practical viewpoint.</p><p class=\"qtext_para\">The lambda calculus, however, has launched a thousand ships.  It is based on the mathematical concept of a variable, properly so-called, and has given rise to many, many serious programming languages, largely because it inherently supports composition.   It also provides a much richer concept of computation that extends to higher order, and that does not mandate mutation.</p><p class=\"qtext_para\">In the long run the only model that matters is the lambda calculus.  Church got it right from the get-go, before the machine models existed, and it has not changed since (but for one detail that he later dropped, the requirement that all variables introduced actually be used&mdash;it is cleaner to think of a term that does not involve a variable x as being vacuously dependent on x, much as a univariate polynomial is &ldquo;automatically&rdquo; a multivariate polynomial.)</p></blockquote><span class=\"qlink_container\"><a href=\"https://www.quora.com/What-is-Lambda-Calculus-in-laymans-terms/answer/Robert-Harper\" target=\"_blank\">What is Lambda Calculus in layman&rsquo;s terms?</a></span>","reblog":{"comment":"<p>What is Lambda Calculus in layman’s terms? by Robert Harper<br><br>Answer by Robert Harper:<blockquote><p class=\"qtext_para\">There are two important models of computation, the lambda calculus and all the others.  </p><p class=\"qtext_para\">The “others” are all “machine models” that differ from one another in uninteresting ways; they are all based on the idea of a program acting on data by modification.  So a TM consists of a program (the finite control) acting on the data (the so-called tape).  A RAM consists of a program (machine language) acting on the data (in memory).  And so on.  The machine-based models are inherently imperative, and offer no notion of composition of programs from parts.  It’s all “first-order”; programs are not data, data does not contain programs.  (Yes, I am aware of encodings, but those are not programs, those are representations of programs as data.) </p><p class=\"qtext_para\">The lambda calculus is the sole “language model”.  It is markedly different from machine models because it is based on one of the most important inventions of the human mind, the concept of a variable in mathematics (which is not at all related to the concept of a “variable”, a misnomer for “assignables” in imperative programming languages and machine models).  A variable is given meaning by substitution, which captures the concept of composition of a whole from parts.  There is no separation of program from data; the lambda calculus is inherently “higher order”.  And it does not rely in any way on modification of storage or data, giving rise to much greater flexibility in programming.  And the lambda calculus is utterly trivial to define, it has variables, functions, and applications, that’s it.</p><p class=\"qtext_para\">The sole virtue of the machine models is their psychological motivation as given by Turing shortly after Church defined computation using the lambda calculus.  Turing’s formulation makes clear that computation is a faculty of the human mind, and that we externalize it using computers.  This view gave rise to the field of Artificial Intelligence, in which Turing was interested from the start.  The machine models have no practical uses at all.  There is no such thing as software development using Turing machines, because there cannot be — there is no notion of composition, so no libraries, no shared code, no reuse, no abstraction, nothing.  It’s worthless from a practical viewpoint.</p><p class=\"qtext_para\">The lambda calculus, however, has launched a thousand ships.  It is based on the mathematical concept of a variable, properly so-called, and has given rise to many, many serious programming languages, largely because it inherently supports composition.   It also provides a much richer concept of computation that extends to higher order, and that does not mandate mutation.</p><p class=\"qtext_para\">In the long run the only model that matters is the lambda calculus.  Church got it right from the get-go, before the machine models existed, and it has not changed since (but for one detail that he later dropped, the requirement that all variables introduced actually be used—it is cleaner to think of a term that does not involve a variable x as being vacuously dependent on x, much as a univariate polynomial is “automatically” a multivariate polynomial.)</p></blockquote><span class=\"qlink_container\"><a href=\"https://www.quora.com/What-is-Lambda-Calculus-in-laymans-terms/answer/Robert-Harper\" target=\"_blank\">What is Lambda Calculus in layman’s terms?</a></span></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145461734776"},"content_raw":"<p>What is Lambda Calculus in layman’s terms? by Robert Harper<br><br>Answer by Robert Harper:<blockquote><p class=\"qtext_para\">There are two important models of computation, the lambda calculus and all the others.  </p><p class=\"qtext_para\">The “others” are all “machine models” that differ from one another in uninteresting ways; they are all based on the idea of a program acting on data by modification.  So a TM consists of a program (the finite control) acting on the data (the so-called tape).  A RAM consists of a program (machine language) acting on the data (in memory).  And so on.  The machine-based models are inherently imperative, and offer no notion of composition of programs from parts.  It’s all “first-order”; programs are not data, data does not contain programs.  (Yes, I am aware of encodings, but those are not programs, those are representations of programs as data.) </p><p class=\"qtext_para\">The lambda calculus is the sole “language model”.  It is markedly different from machine models because it is based on one of the most important inventions of the human mind, the concept of a variable in mathematics (which is not at all related to the concept of a “variable”, a misnomer for “assignables” in imperative programming languages and machine models).  A variable is given meaning by substitution, which captures the concept of composition of a whole from parts.  There is no separation of program from data; the lambda calculus is inherently “higher order”.  And it does not rely in any way on modification of storage or data, giving rise to much greater flexibility in programming.  And the lambda calculus is utterly trivial to define, it has variables, functions, and applications, that’s it.</p><p class=\"qtext_para\">The sole virtue of the machine models is their psychological motivation as given by Turing shortly after Church defined computation using the lambda calculus.  Turing’s formulation makes clear that computation is a faculty of the human mind, and that we externalize it using computers.  This view gave rise to the field of Artificial Intelligence, in which Turing was interested from the start.  The machine models have no practical uses at all.  There is no such thing as software development using Turing machines, because there cannot be — there is no notion of composition, so no libraries, no shared code, no reuse, no abstraction, nothing.  It’s worthless from a practical viewpoint.</p><p class=\"qtext_para\">The lambda calculus, however, has launched a thousand ships.  It is based on the mathematical concept of a variable, properly so-called, and has given rise to many, many serious programming languages, largely because it inherently supports composition.   It also provides a much richer concept of computation that extends to higher order, and that does not mandate mutation.</p><p class=\"qtext_para\">In the long run the only model that matters is the lambda calculus.  Church got it right from the get-go, before the machine models existed, and it has not changed since (but for one detail that he later dropped, the requirement that all variables introduced actually be used—it is cleaner to think of a term that does not involve a variable x as being vacuously dependent on x, much as a univariate polynomial is “automatically” a multivariate polynomial.)</p></blockquote><span class=\"qlink_container\"><a href=\"https://www.quora.com/What-is-Lambda-Calculus-in-laymans-terms/answer/Robert-Harper\" target=\"_blank\">What is Lambda Calculus in layman’s terms?</a></span></p>","content":"<p><p>What is Lambda Calculus in layman&rsquo;s terms? by Robert Harper<br /><br />Answer by Robert Harper:</p><blockquote><p>There are two important models of computation, the lambda calculus and all the others.&nbsp; </p><p>The &ldquo;others&rdquo; are all &ldquo;machine models&rdquo; that differ from one another in uninteresting ways; they are all based on the idea of a program acting on data by modification.&nbsp; So a TM consists of a program (the finite control) acting on the data (the so-called tape).&nbsp; A RAM consists of a program (machine language) acting on the data (in memory).&nbsp; And so on.&nbsp; The machine-based models are inherently imperative, and offer no notion of composition of programs from parts.&nbsp; It&rsquo;s all &ldquo;first-order&rdquo;; programs are not data, data does not contain programs.&nbsp; (Yes, I am aware of encodings, but those are not programs, those are representations of programs as data.) </p><p>The lambda calculus is the sole &ldquo;language model&rdquo;.&nbsp; It is markedly different from machine models because it is based on one of the most important inventions of the human mind, the concept of a variable in mathematics (which is not at all related to the concept of a &ldquo;variable&rdquo;, a misnomer for &ldquo;assignables&rdquo; in imperative programming languages and machine models).&nbsp; A variable is given meaning by substitution, which captures the concept of composition of a whole from parts.&nbsp; There is no separation of program from data; the lambda calculus is inherently &ldquo;higher order&rdquo;.&nbsp; And it does not rely in any way on modification of storage or data, giving rise to much greater flexibility in programming.&nbsp; And the lambda calculus is utterly trivial to define, it has variables, functions, and applications, that&rsquo;s it.</p><p>The sole virtue of the machine models is their psychological motivation as given by Turing shortly after Church defined computation using the lambda calculus.&nbsp; Turing&rsquo;s formulation makes clear that computation is a faculty of the human mind, and that we externalize it using computers.&nbsp; This view gave rise to the field of Artificial Intelligence, in which Turing was interested from the start.&nbsp; The machine models have no practical uses at all.&nbsp; There is no such thing as software development using Turing machines, because there cannot be &mdash; there is no notion of composition, so no libraries, no shared code, no reuse, no abstraction, nothing.&nbsp; It&rsquo;s worthless from a practical viewpoint.</p><p>The lambda calculus, however, has launched a thousand ships.&nbsp; It is based on the mathematical concept of a variable, properly so-called, and has given rise to many, many serious programming languages, largely because it inherently supports composition.&nbsp;&nbsp; It also provides a much richer concept of computation that extends to higher order, and that does not mandate mutation.</p><p>In the long run the only model that matters is the lambda calculus.&nbsp; Church got it right from the get-go, before the machine models existed, and it has not changed since (but for one detail that he later dropped, the requirement that all variables introduced actually be used&mdash;it is cleaner to think of a term that does not involve a variable x as being vacuously dependent on x, much as a univariate polynomial is &ldquo;automatically&rdquo; a multivariate polynomial.)</p></blockquote><a href=\"https://www.quora.com/What-is-Lambda-Calculus-in-laymans-terms/answer/Robert-Harper\" target=\"_blank\">What is Lambda Calculus in layman&rsquo;s terms?</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145461717626,"post_url":"https://tyb.tumblr.com/post/145461717626/how-much-lambda-calculus-is-needed-to-learn","slug":"how-much-lambda-calculus-is-needed-to-learn","date":"2016-06-05 17:26:50 GMT","timestamp":1465147610,"state":"published","format":"html","reblog_key":"Vc2J1w7w","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27UCQfw","summary":"How much lambda calculus is needed to learn functional programming?","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"How much lambda calculus is needed to learn functional programming?","body":"How much lambda calculus is needed to learn functional programming? by Toby Thain<br/><br/>Answer by Toby Thain:<blockquote>In my opinion, none.<br/><br/>Nor is <span class=\"qlink_container\"><a href=\"https://www.quora.com/topic/Category-Theory\" target=\"_blank\">Category Theory</a></span> necessary to learn how to use monadic style (or <a href=\"https://www.quora.com/topic/Monads\" target=\"_blank\">Monads</a>).<br/><br/>Of course, <i>later on,</i> studying <a href=\"https://www.quora.com/topic/Lambda-Calculus\" target=\"_blank\">Lambda Calculus</a> and some of the theory behind objects like monoids, semigroups, functors, etc, is valuable. But it is not a prerequisite to using these functional tools by any means. You can see this in good <a href=\"https://www.quora.com/topic/Functional-Programming\" target=\"_blank\">Functional Programming</a> texts like <a href=\"http://mitpress.mit.edu/sicp/\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"mit.edu\")'>SICP </a>and Thompson&rsquo;s <a href=\"http://www.haskellcraft.com/craft3e/Home.html\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"haskellcraft.com\")'>Haskell: The Craft of Functional Programming</a>.</blockquote><a href=\"https://www.quora.com/How-much-lambda-calculus-is-needed-to-learn-functional-programming/answer/Toby-Thain\" target=\"_blank\">How much lambda calculus is needed to learn functional programming?</a>","reblog":{"comment":"<p>How much lambda calculus is needed to learn functional programming? by Toby Thain<br><br>Answer by Toby Thain:<blockquote>In my opinion, none.<br><br>Nor is <span class=\"qlink_container\"><a href=\"https://www.quora.com/topic/Category-Theory\" target=\"_blank\">Category Theory</a></span> necessary to learn how to use monadic style (or <a href=\"https://www.quora.com/topic/Monads\" target=\"_blank\">Monads</a>).<br><br>Of course, <i>later on,</i> studying <a href=\"https://www.quora.com/topic/Lambda-Calculus\" target=\"_blank\">Lambda Calculus</a> and some of the theory behind objects like monoids, semigroups, functors, etc, is valuable. But it is not a prerequisite to using these functional tools by any means. You can see this in good <a href=\"https://www.quora.com/topic/Functional-Programming\" target=\"_blank\">Functional Programming</a> texts like <a href=\"http://mitpress.mit.edu/sicp/\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"mit.edu\")'>SICP </a>and Thompson’s <a href=\"http://www.haskellcraft.com/craft3e/Home.html\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"haskellcraft.com\")'>Haskell: The Craft of Functional Programming</a>.</blockquote><a href=\"https://www.quora.com/How-much-lambda-calculus-is-needed-to-learn-functional-programming/answer/Toby-Thain\" target=\"_blank\">How much lambda calculus is needed to learn functional programming?</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145461717626"},"content_raw":"<p>How much lambda calculus is needed to learn functional programming? by Toby Thain<br><br>Answer by Toby Thain:<blockquote>In my opinion, none.<br><br>Nor is <span class=\"qlink_container\"><a href=\"https://www.quora.com/topic/Category-Theory\" target=\"_blank\">Category Theory</a></span> necessary to learn how to use monadic style (or <a href=\"https://www.quora.com/topic/Monads\" target=\"_blank\">Monads</a>).<br><br>Of course, <i>later on,</i> studying <a href=\"https://www.quora.com/topic/Lambda-Calculus\" target=\"_blank\">Lambda Calculus</a> and some of the theory behind objects like monoids, semigroups, functors, etc, is valuable. But it is not a prerequisite to using these functional tools by any means. You can see this in good <a href=\"https://www.quora.com/topic/Functional-Programming\" target=\"_blank\">Functional Programming</a> texts like <a href=\"http://mitpress.mit.edu/sicp/\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"mit.edu\")'>SICP </a>and Thompson’s <a href=\"http://www.haskellcraft.com/craft3e/Home.html\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"haskellcraft.com\")'>Haskell: The Craft of Functional Programming</a>.</blockquote><a href=\"https://www.quora.com/How-much-lambda-calculus-is-needed-to-learn-functional-programming/answer/Toby-Thain\" target=\"_blank\">How much lambda calculus is needed to learn functional programming?</a></p>","content":"<p><p>How much lambda calculus is needed to learn functional programming? by Toby Thain<br /><br />Answer by Toby Thain:</p><blockquote><p>In my opinion, none.<br /><br />Nor is <a href=\"https://www.quora.com/topic/Category-Theory\" target=\"_blank\">Category Theory</a> necessary to learn how to use monadic style (or <a href=\"https://www.quora.com/topic/Monads\" target=\"_blank\">Monads</a>).<br /><br />Of course, <i>later on,</i> studying <a href=\"https://www.quora.com/topic/Lambda-Calculus\" target=\"_blank\">Lambda Calculus</a> and some of the theory behind objects like monoids, semigroups, functors, etc, is valuable. But it is not a prerequisite to using these functional tools by any means. You can see this in good <a href=\"https://www.quora.com/topic/Functional-Programming\" target=\"_blank\">Functional Programming</a> texts like <a href=\"http://mitpress.mit.edu/sicp/\" target=\"_blank\">SICP </a>and Thompson&rsquo;s <a href=\"http://www.haskellcraft.com/craft3e/Home.html\" target=\"_blank\">Haskell: The Craft of Functional Programming</a>.</p></blockquote><a href=\"https://www.quora.com/How-much-lambda-calculus-is-needed-to-learn-functional-programming/answer/Toby-Thain\" target=\"_blank\">How much lambda calculus is needed to learn functional programming?</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145461502906,"post_url":"https://tyb.tumblr.com/post/145461502906/haskell-programming-language-what-are-type","slug":"haskell-programming-language-what-are-type","date":"2016-06-05 17:21:47 GMT","timestamp":1465147307,"state":"published","format":"html","reblog_key":"gVqGRuQS","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27UBcEw","summary":"Haskell (programming language): What are type classes and how are they useful?","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"Haskell (programming language): What are type classes and how are they useful?","body":"Haskell (programming language): What are type classes and how are they useful? by Costya Perepelitsa<br/><br/>Answer by Costya Perepelitsa:<blockquote>You could think of type classes as an analogue of interfaces in object-oriented languages. It&rsquo;s a way of making polymorphic functions which don&rsquo;t care which type is used so long as it is capable of some small set of generic things.<br/><br/><br/>Let&rsquo;s say you implement a really awesome sorting algorithm. It combines two or more different sorting algorithms and chooses intelligently between them based on the list&rsquo;s size. Your use case was to sort a list of integers, so that&rsquo;s how you wrote it:<br/><code class=\"prettyprint inline\"><code class=\"language-haskell\">superSort :: [Int] -&gt; [Int]</code></code><br/>As you produce more code, you decide you would do well to sort a potentially giant list of strings, and you realize that the <code class=\"prettyprint inline\">superSort</code> function you wrote would be perfect for it. Since <code class=\"prettyprint inline\">superSort</code> is only for integers, you copy/paste the function definition but specify the types as strings, instead:<br/><code class=\"prettyprint inline\"><code class=\"language-haskell\">superStringSort :: [String] -&gt; [String]</code></code><br/>As you develop further, you find that you could really benefit from a sort on a type you created. So you copy/paste again and then modify <code class=\"prettyprint inline\">superSort</code> to make the proper comparisons between two values of your type. You miss one and forget an argument somewhere else, but then fix those bugs in a few minutes of debugging.<br/><code class=\"prettyprint inline\"><code class=\"language-haskell\">superFooSort :: [Foo] -&gt; [Foo]</code></code><br/><br/>Then it happens that you need to sort a list of <code class=\"prettyprint inline\">Foo</code> by a different property of <code class=\"prettyprint inline\">Foo</code> than your current <code class=\"prettyprint inline\">superFooSort</code> does. You are sick of copy/pasting and making minor modifications to the same function, so you consider other possibilities, and that&rsquo;s when inspiration strikes.<br/>You realize that instead of hard-coding the proper comparisons into the <code class=\"prettyprint inline\">superSort</code> function, you could specify it when you call <code class=\"prettyprint inline\">superSort</code> to begin with. You realize further that this will now allow you to sort <i>any</i> type by <i>any</i> criteria so long as you can provide the comparator to use!<br/>So you write this:<br/><pre class=\"prettyprint linenums\"><code class=\"language-haskell\">data Comparison = Less | Equal | Greater\ngenericSuperSort :: (a -&gt; a -&gt; Comparison) -&gt; [a] -&gt; [a]</code></pre><br/>This works wonderfully for a while. Then you start getting tired of having to write the same comparator functions over and over. So you define each comparator you use one time and refer to it. You were used to giving <code class=\"prettyprint inline\">superSort</code> one argument, so you periodically leave out the comparator when calling <code class=\"prettyprint inline\">genericSuperSort</code>, but that&rsquo;s a minor annoyance. You daydream for a bit about how convenient it&rsquo;d be if data types somehow <i>knew</i> how to compare themselves, as part of their definitions.<br/><br/>And then you get to a point where you have a list of <code class=\"prettyprint inline\">Foo</code> and need to find the maximum for a criteria you already have a comparator for. So you whip out this bad boy:<br/><code class=\"prettyprint inline\"><code class=\"language-haskell\">let biggestFoo = foldl1 (\\biggest f -&gt; case compareFoo f biggest of | Greater -&gt; f | _ -&gt; biggest) foos</code></code><br/>That&rsquo;s annoying to write and annoying to read, and you have to do it a few more times in your code. So you consider writing something like this:<br/><pre class=\"prettyprint linenums\"><code class=\"language-haskell\">genericMax :: (a -&gt; a -&gt; Comparison) -&gt; [a] -&gt; a\ngenericMin :: (a -&gt; a -&gt; Comparison) -&gt; [a] -&gt; a</code></pre><br/><br/>Then you need to insert a <code class=\"prettyprint inline\">Foo</code> into an already-sorted list of foo.<br/>Ugh, here we go again:<br/><code class=\"prettyprint inline\"><code class=\"language-haskell\">genericInsert :: (a -&gt; a -&gt; Comparison) -&gt; a -&gt; [a] -&gt; [a]</code></code><br/>One day, <code class=\"prettyprint inline\">genericInsert</code> stops inserting things correctly. It takes you a day of debugging and second-guessing yourself to realize that you used a different comparator in <code class=\"prettyprint inline\">genericInsert</code> than you did to sort the list. Bloody hell.<br/><br/>There has to be an easier way.<br/><br/><br/>Let&rsquo;s talk about <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code>.<br/><code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> is a type class. If a type is a member of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> type class, that means the type knows how to order itself relative to other values of the same type. That means that all of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">(a -&gt; a -&gt; Comparison)</code></code> argument in all of the above functions are now implicit; it&rsquo;s always the comparator for the type you&rsquo;re sorting, inserting, or finding the min or max of.<br/><br/>If you look at the <code class=\"prettyprint inline\">sort</code> function in <code class=\"prettyprint inline\"><code class=\"language-haskell\">Data.List</code></code>, you&rsquo;ll see that its signature looks like this:<br/><code class=\"prettyprint inline\"><code class=\"language-haskell\">sort :: Ord a =&gt; [a] -&gt; [a]</code></code><br/>The type class specification <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord a =&gt;</code></code> means that this function is effectively saying, &ldquo;I don&rsquo;t care what type you give me, so long as it knows how to compare itself with itself.&rdquo;<br/>There are also functions:<br/><pre class=\"prettyprint linenums\"><code class=\"language-haskell\">insert :: Ord a =&gt; a -&gt; [a] -&gt; [a]\nmaximum :: Ord a =&gt; [a] -&gt; a\nminimum :: Ord a =&gt; [a] -&gt; a</code></pre><br/>&hellip;and more, scattered in other libraries, including third-party libraries you may end up using.<br/><br/>So the benefit with <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> is this: once you make the type an instance of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> type class (i.e. you teach it how to order itself), you can use it with <i>any</i> function you find forevermore which is defined for members of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> type class, <i>without any extra work or glue code on your part</i>.<br/><br/><br/>Another good example is the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Show</code></code> type class, which allows you to use this little guy:<br/><code class=\"prettyprint inline\">show :: Show a =&gt; a -&gt; string</code><br/>If you make your type an instance of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Show</code></code> type class, you avoid a problem OCaml has with redundancy:<br/><pre class=\"prettyprint linenums\"><code class=\"language-ocaml\">string_of_int : int -&gt; string\nstring_of_float : float -&gt; string\nstring_of_bool : bool -&gt; string\nstring_of_your_type_here : your_type_here -&gt; string</code></pre></blockquote><span class=\"qlink_container\"><a href=\"https://www.quora.com/Haskell-programming-language-What-are-type-classes-and-how-are-they-useful-1/answer/Costya-Perepelitsa\" target=\"_blank\">Haskell (programming language): What are type classes and how are they useful?</a></span>","reblog":{"comment":"<p>Haskell (programming language): What are type classes and how are they useful? by Costya Perepelitsa<br><br>Answer by Costya Perepelitsa:<blockquote>You could think of type classes as an analogue of interfaces in object-oriented languages. It’s a way of making polymorphic functions which don’t care which type is used so long as it is capable of some small set of generic things.<br><br><br>Let’s say you implement a really awesome sorting algorithm. It combines two or more different sorting algorithms and chooses intelligently between them based on the list’s size. Your use case was to sort a list of integers, so that’s how you wrote it:<br><code class=\"prettyprint inline\"><code class=\"language-haskell\">superSort :: [Int] -&gt; [Int]</code></code><br>As you produce more code, you decide you would do well to sort a potentially giant list of strings, and you realize that the <code class=\"prettyprint inline\">superSort</code> function you wrote would be perfect for it. Since <code class=\"prettyprint inline\">superSort</code> is only for integers, you copy/paste the function definition but specify the types as strings, instead:<br><code class=\"prettyprint inline\"><code class=\"language-haskell\">superStringSort :: [String] -&gt; [String]</code></code><br>As you develop further, you find that you could really benefit from a sort on a type you created. So you copy/paste again and then modify <code class=\"prettyprint inline\">superSort</code> to make the proper comparisons between two values of your type. You miss one and forget an argument somewhere else, but then fix those bugs in a few minutes of debugging.<br><code class=\"prettyprint inline\"><code class=\"language-haskell\">superFooSort :: [Foo] -&gt; [Foo]</code></code><br><br>Then it happens that you need to sort a list of <code class=\"prettyprint inline\">Foo</code> by a different property of <code class=\"prettyprint inline\">Foo</code> than your current <code class=\"prettyprint inline\">superFooSort</code> does. You are sick of copy/pasting and making minor modifications to the same function, so you consider other possibilities, and that’s when inspiration strikes.<br>You realize that instead of hard-coding the proper comparisons into the <code class=\"prettyprint inline\">superSort</code> function, you could specify it when you call <code class=\"prettyprint inline\">superSort</code> to begin with. You realize further that this will now allow you to sort <i>any</i> type by <i>any</i> criteria so long as you can provide the comparator to use!<br>So you write this:<br><pre class=\"prettyprint linenums\"><code class=\"language-haskell\">data Comparison = Less | Equal | Greater\ngenericSuperSort :: (a -&gt; a -&gt; Comparison) -&gt; [a] -&gt; [a]</code></pre><br>This works wonderfully for a while. Then you start getting tired of having to write the same comparator functions over and over. So you define each comparator you use one time and refer to it. You were used to giving <code class=\"prettyprint inline\">superSort</code> one argument, so you periodically leave out the comparator when calling <code class=\"prettyprint inline\">genericSuperSort</code>, but that’s a minor annoyance. You daydream for a bit about how convenient it’d be if data types somehow <i>knew</i> how to compare themselves, as part of their definitions.<br><br>And then you get to a point where you have a list of <code class=\"prettyprint inline\">Foo</code> and need to find the maximum for a criteria you already have a comparator for. So you whip out this bad boy:<br><code class=\"prettyprint inline\"><code class=\"language-haskell\">let biggestFoo = foldl1 (\\biggest f -&gt; case compareFoo f biggest of | Greater -&gt; f | _ -&gt; biggest) foos</code></code><br>That’s annoying to write and annoying to read, and you have to do it a few more times in your code. So you consider writing something like this:<br><pre class=\"prettyprint linenums\"><code class=\"language-haskell\">genericMax :: (a -&gt; a -&gt; Comparison) -&gt; [a] -&gt; a\ngenericMin :: (a -&gt; a -&gt; Comparison) -&gt; [a] -&gt; a</code></pre><br><br>Then you need to insert a <code class=\"prettyprint inline\">Foo</code> into an already-sorted list of foo.<br>Ugh, here we go again:<br><code class=\"prettyprint inline\"><code class=\"language-haskell\">genericInsert :: (a -&gt; a -&gt; Comparison) -&gt; a -&gt; [a] -&gt; [a]</code></code><br>One day, <code class=\"prettyprint inline\">genericInsert</code> stops inserting things correctly. It takes you a day of debugging and second-guessing yourself to realize that you used a different comparator in <code class=\"prettyprint inline\">genericInsert</code> than you did to sort the list. Bloody hell.<br><br>There has to be an easier way.<br><br><br>Let’s talk about <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code>.<br><code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> is a type class. If a type is a member of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> type class, that means the type knows how to order itself relative to other values of the same type. That means that all of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">(a -&gt; a -&gt; Comparison)</code></code> argument in all of the above functions are now implicit; it’s always the comparator for the type you’re sorting, inserting, or finding the min or max of.<br><br>If you look at the <code class=\"prettyprint inline\">sort</code> function in <code class=\"prettyprint inline\"><code class=\"language-haskell\">Data.List</code></code>, you’ll see that its signature looks like this:<br><code class=\"prettyprint inline\"><code class=\"language-haskell\">sort :: Ord a =&gt; [a] -&gt; [a]</code></code><br>The type class specification <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord a =&gt;</code></code> means that this function is effectively saying, “I don’t care what type you give me, so long as it knows how to compare itself with itself.”<br>There are also functions:<br><pre class=\"prettyprint linenums\"><code class=\"language-haskell\">insert :: Ord a =&gt; a -&gt; [a] -&gt; [a]\nmaximum :: Ord a =&gt; [a] -&gt; a\nminimum :: Ord a =&gt; [a] -&gt; a</code></pre><br>…and more, scattered in other libraries, including third-party libraries you may end up using.<br><br>So the benefit with <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> is this: once you make the type an instance of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> type class (i.e. you teach it how to order itself), you can use it with <i>any</i> function you find forevermore which is defined for members of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> type class, <i>without any extra work or glue code on your part</i>.<br><br><br>Another good example is the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Show</code></code> type class, which allows you to use this little guy:<br><code class=\"prettyprint inline\">show :: Show a =&gt; a -&gt; string</code><br>If you make your type an instance of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Show</code></code> type class, you avoid a problem OCaml has with redundancy:<br><pre class=\"prettyprint linenums\"><code class=\"language-ocaml\">string_of_int : int -&gt; string\nstring_of_float : float -&gt; string\nstring_of_bool : bool -&gt; string\nstring_of_your_type_here : your_type_here -&gt; string</code></pre></blockquote><span class=\"qlink_container\"><a href=\"https://www.quora.com/Haskell-programming-language-What-are-type-classes-and-how-are-they-useful-1/answer/Costya-Perepelitsa\" target=\"_blank\">Haskell (programming language): What are type classes and how are they useful?</a></span></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145461502906"},"content_raw":"<p>Haskell (programming language): What are type classes and how are they useful? by Costya Perepelitsa<br><br>Answer by Costya Perepelitsa:<blockquote>You could think of type classes as an analogue of interfaces in object-oriented languages. It’s a way of making polymorphic functions which don’t care which type is used so long as it is capable of some small set of generic things.<br><br><br>Let’s say you implement a really awesome sorting algorithm. It combines two or more different sorting algorithms and chooses intelligently between them based on the list’s size. Your use case was to sort a list of integers, so that’s how you wrote it:<br><code class=\"prettyprint inline\"><code class=\"language-haskell\">superSort :: [Int] -&gt; [Int]</code></code><br>As you produce more code, you decide you would do well to sort a potentially giant list of strings, and you realize that the <code class=\"prettyprint inline\">superSort</code> function you wrote would be perfect for it. Since <code class=\"prettyprint inline\">superSort</code> is only for integers, you copy/paste the function definition but specify the types as strings, instead:<br><code class=\"prettyprint inline\"><code class=\"language-haskell\">superStringSort :: [String] -&gt; [String]</code></code><br>As you develop further, you find that you could really benefit from a sort on a type you created. So you copy/paste again and then modify <code class=\"prettyprint inline\">superSort</code> to make the proper comparisons between two values of your type. You miss one and forget an argument somewhere else, but then fix those bugs in a few minutes of debugging.<br><code class=\"prettyprint inline\"><code class=\"language-haskell\">superFooSort :: [Foo] -&gt; [Foo]</code></code><br><br>Then it happens that you need to sort a list of <code class=\"prettyprint inline\">Foo</code> by a different property of <code class=\"prettyprint inline\">Foo</code> than your current <code class=\"prettyprint inline\">superFooSort</code> does. You are sick of copy/pasting and making minor modifications to the same function, so you consider other possibilities, and that’s when inspiration strikes.<br>You realize that instead of hard-coding the proper comparisons into the <code class=\"prettyprint inline\">superSort</code> function, you could specify it when you call <code class=\"prettyprint inline\">superSort</code> to begin with. You realize further that this will now allow you to sort <i>any</i> type by <i>any</i> criteria so long as you can provide the comparator to use!<br>So you write this:<br><pre class=\"prettyprint linenums\"><code class=\"language-haskell\">data Comparison = Less | Equal | Greater\ngenericSuperSort :: (a -&gt; a -&gt; Comparison) -&gt; [a] -&gt; [a]</code></pre><br>This works wonderfully for a while. Then you start getting tired of having to write the same comparator functions over and over. So you define each comparator you use one time and refer to it. You were used to giving <code class=\"prettyprint inline\">superSort</code> one argument, so you periodically leave out the comparator when calling <code class=\"prettyprint inline\">genericSuperSort</code>, but that’s a minor annoyance. You daydream for a bit about how convenient it’d be if data types somehow <i>knew</i> how to compare themselves, as part of their definitions.<br><br>And then you get to a point where you have a list of <code class=\"prettyprint inline\">Foo</code> and need to find the maximum for a criteria you already have a comparator for. So you whip out this bad boy:<br><code class=\"prettyprint inline\"><code class=\"language-haskell\">let biggestFoo = foldl1 (\\biggest f -&gt; case compareFoo f biggest of | Greater -&gt; f | _ -&gt; biggest) foos</code></code><br>That’s annoying to write and annoying to read, and you have to do it a few more times in your code. So you consider writing something like this:<br><pre class=\"prettyprint linenums\"><code class=\"language-haskell\">genericMax :: (a -&gt; a -&gt; Comparison) -&gt; [a] -&gt; a\ngenericMin :: (a -&gt; a -&gt; Comparison) -&gt; [a] -&gt; a</code></pre><br><br>Then you need to insert a <code class=\"prettyprint inline\">Foo</code> into an already-sorted list of foo.<br>Ugh, here we go again:<br><code class=\"prettyprint inline\"><code class=\"language-haskell\">genericInsert :: (a -&gt; a -&gt; Comparison) -&gt; a -&gt; [a] -&gt; [a]</code></code><br>One day, <code class=\"prettyprint inline\">genericInsert</code> stops inserting things correctly. It takes you a day of debugging and second-guessing yourself to realize that you used a different comparator in <code class=\"prettyprint inline\">genericInsert</code> than you did to sort the list. Bloody hell.<br><br>There has to be an easier way.<br><br><br>Let’s talk about <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code>.<br><code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> is a type class. If a type is a member of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> type class, that means the type knows how to order itself relative to other values of the same type. That means that all of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">(a -&gt; a -&gt; Comparison)</code></code> argument in all of the above functions are now implicit; it’s always the comparator for the type you’re sorting, inserting, or finding the min or max of.<br><br>If you look at the <code class=\"prettyprint inline\">sort</code> function in <code class=\"prettyprint inline\"><code class=\"language-haskell\">Data.List</code></code>, you’ll see that its signature looks like this:<br><code class=\"prettyprint inline\"><code class=\"language-haskell\">sort :: Ord a =&gt; [a] -&gt; [a]</code></code><br>The type class specification <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord a =&gt;</code></code> means that this function is effectively saying, “I don’t care what type you give me, so long as it knows how to compare itself with itself.”<br>There are also functions:<br><pre class=\"prettyprint linenums\"><code class=\"language-haskell\">insert :: Ord a =&gt; a -&gt; [a] -&gt; [a]\nmaximum :: Ord a =&gt; [a] -&gt; a\nminimum :: Ord a =&gt; [a] -&gt; a</code></pre><br>…and more, scattered in other libraries, including third-party libraries you may end up using.<br><br>So the benefit with <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> is this: once you make the type an instance of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> type class (i.e. you teach it how to order itself), you can use it with <i>any</i> function you find forevermore which is defined for members of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Ord</code></code> type class, <i>without any extra work or glue code on your part</i>.<br><br><br>Another good example is the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Show</code></code> type class, which allows you to use this little guy:<br><code class=\"prettyprint inline\">show :: Show a =&gt; a -&gt; string</code><br>If you make your type an instance of the <code class=\"prettyprint inline\"><code class=\"language-haskell\">Show</code></code> type class, you avoid a problem OCaml has with redundancy:<br><pre class=\"prettyprint linenums\"><code class=\"language-ocaml\">string_of_int : int -&gt; string\nstring_of_float : float -&gt; string\nstring_of_bool : bool -&gt; string\nstring_of_your_type_here : your_type_here -&gt; string</code></pre></blockquote><span class=\"qlink_container\"><a href=\"https://www.quora.com/Haskell-programming-language-What-are-type-classes-and-how-are-they-useful-1/answer/Costya-Perepelitsa\" target=\"_blank\">Haskell (programming language): What are type classes and how are they useful?</a></span></p>","content":"<p><p>Haskell (programming language): What are type classes and how are they useful? by Costya Perepelitsa<br /><br />Answer by Costya Perepelitsa:</p><blockquote><p>You could think of type classes as an analogue of interfaces in object-oriented languages. It&rsquo;s a way of making polymorphic functions which don&rsquo;t care which type is used so long as it is capable of some small set of generic things.<br /><br /><br />Let&rsquo;s say you implement a really awesome sorting algorithm. It combines two or more different sorting algorithms and chooses intelligently between them based on the list&rsquo;s size. Your use case was to sort a list of integers, so that&rsquo;s how you wrote it:<br /><code><code>superSort :: [Int] -&gt; [Int]</code></code><br />As you produce more code, you decide you would do well to sort a potentially giant list of strings, and you realize that the <code>superSort</code> function you wrote would be perfect for it. Since <code>superSort</code> is only for integers, you copy/paste the function definition but specify the types as strings, instead:<br /><code><code>superStringSort :: [String] -&gt; [String]</code></code><br />As you develop further, you find that you could really benefit from a sort on a type you created. So you copy/paste again and then modify <code>superSort</code> to make the proper comparisons between two values of your type. You miss one and forget an argument somewhere else, but then fix those bugs in a few minutes of debugging.<br /><code><code>superFooSort :: [Foo] -&gt; [Foo]</code></code><br /><br />Then it happens that you need to sort a list of <code>Foo</code> by a different property of <code>Foo</code> than your current <code>superFooSort</code> does. You are sick of copy/pasting and making minor modifications to the same function, so you consider other possibilities, and that&rsquo;s when inspiration strikes.<br />You realize that instead of hard-coding the proper comparisons into the <code>superSort</code> function, you could specify it when you call <code>superSort</code> to begin with. You realize further that this will now allow you to sort <i>any</i> type by <i>any</i> criteria so long as you can provide the comparator to use!<br />So you write this:<br /><pre><code>data Comparison = Less | Equal | Greater\ngenericSuperSort :: (a -&gt; a -&gt; Comparison) -&gt; [a] -&gt; [a]</code></pre><br />This works wonderfully for a while. Then you start getting tired of having to write the same comparator functions over and over. So you define each comparator you use one time and refer to it. You were used to giving <code>superSort</code> one argument, so you periodically leave out the comparator when calling <code>genericSuperSort</code>, but that&rsquo;s a minor annoyance. You daydream for a bit about how convenient it&rsquo;d be if data types somehow <i>knew</i> how to compare themselves, as part of their definitions.<br /><br />And then you get to a point where you have a list of <code>Foo</code> and need to find the maximum for a criteria you already have a comparator for. So you whip out this bad boy:<br /><code><code>let biggestFoo = foldl1 (\\biggest f -&gt; case compareFoo f biggest of | Greater -&gt; f | _ -&gt; biggest) foos</code></code><br />That&rsquo;s annoying to write and annoying to read, and you have to do it a few more times in your code. So you consider writing something like this:<br /><pre><code>genericMax :: (a -&gt; a -&gt; Comparison) -&gt; [a] -&gt; a\ngenericMin :: (a -&gt; a -&gt; Comparison) -&gt; [a] -&gt; a</code></pre><br /><br />Then you need to insert a <code>Foo</code> into an already-sorted list of foo.<br />Ugh, here we go again:<br /><code><code>genericInsert :: (a -&gt; a -&gt; Comparison) -&gt; a -&gt; [a] -&gt; [a]</code></code><br />One day, <code>genericInsert</code> stops inserting things correctly. It takes you a day of debugging and second-guessing yourself to realize that you used a different comparator in <code>genericInsert</code> than you did to sort the list. Bloody hell.<br /><br />There has to be an easier way.<br /><br /><br />Let&rsquo;s talk about <code><code>Ord</code></code>.<br /><code><code>Ord</code></code> is a type class. If a type is a member of the <code><code>Ord</code></code> type class, that means the type knows how to order itself relative to other values of the same type. That means that all of the <code><code>(a -&gt; a -&gt; Comparison)</code></code> argument in all of the above functions are now implicit; it&rsquo;s always the comparator for the type you&rsquo;re sorting, inserting, or finding the min or max of.<br /><br />If you look at the <code>sort</code> function in <code><code>Data.List</code></code>, you&rsquo;ll see that its signature looks like this:<br /><code><code>sort :: Ord a =&gt; [a] -&gt; [a]</code></code><br />The type class specification <code><code>Ord a =&gt;</code></code> means that this function is effectively saying, &ldquo;I don&rsquo;t care what type you give me, so long as it knows how to compare itself with itself.&rdquo;<br />There are also functions:<br /><pre><code>insert :: Ord a =&gt; a -&gt; [a] -&gt; [a]\nmaximum :: Ord a =&gt; [a] -&gt; a\nminimum :: Ord a =&gt; [a] -&gt; a</code></pre><br />&hellip;and more, scattered in other libraries, including third-party libraries you may end up using.<br /><br />So the benefit with <code><code>Ord</code></code> is this: once you make the type an instance of the <code><code>Ord</code></code> type class (i.e. you teach it how to order itself), you can use it with <i>any</i> function you find forevermore which is defined for members of the <code><code>Ord</code></code> type class, <i>without any extra work or glue code on your part</i>.<br /><br /><br />Another good example is the <code><code>Show</code></code> type class, which allows you to use this little guy:<br /><code>show :: Show a =&gt; a -&gt; string</code><br />If you make your type an instance of the <code><code>Show</code></code> type class, you avoid a problem OCaml has with redundancy:<br /><pre><code>string_of_int : int -&gt; string\nstring_of_float : float -&gt; string\nstring_of_bool : bool -&gt; string\nstring_of_your_type_here : your_type_here -&gt; string</code></pre></p></blockquote><a href=\"https://www.quora.com/Haskell-programming-language-What-are-type-classes-and-how-are-they-useful-1/answer/Costya-Perepelitsa\" target=\"_blank\">Haskell (programming language): What are type classes and how are they useful?</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145354296821,"post_url":"https://tyb.tumblr.com/post/145354296821/what-are-good-ways-to-learn-how-to-solve-marathon","slug":"what-are-good-ways-to-learn-how-to-solve-marathon","date":"2016-06-03 13:29:45 GMT","timestamp":1464960585,"state":"published","format":"html","reblog_key":"W0U3uKRM","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27Noetr","summary":"What are good ways to learn how to solve Marathon problems on top coder?","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"What are good ways to learn how to solve Marathon problems on top coder?","body":"d) beam search: Maintain a set of K best states. Then expand the neighbourhood each of these states to some KN states, and then take the best K out of these. (Note that greedy mentioned above is beam search with K = 1).<br/><br/>Answer by Pradeep George Mathias:<blockquote>So I haven&rsquo;t participated myself in any TC Marathon match, but I&rsquo;m assuming that its similar to what you have in Codechef Long Contest tie-break problems.<br/><br/>Look at various techniques people use to get good solutions:<br/>(a) <b>local search:</b> from each state, try to go to a nearby better state.<br/>(b) <b>greedy:</b> same as above, here you&rsquo;re going to best state in neighbourhood.<br/><br/>The problem with the above is that you may get stuck in local optima, so&hellip;<br/>&copy; <b>simulated annealing:</b> probabilistically go to the best state. As time goes, the relative probability of going to the best state increases.<br/>(d) <b>beam search:</b> Maintain a set of K best states. Then expand the neighbourhood each of these states to some KN states, and then take the best K out of these. (Note that greedy mentioned above is beam search with K = 1).<br/><br/>For all the above methods, you&rsquo;d need a metric, to calculate how good a particular state is.<br/><br/>In reality, you&rsquo;d generally end up coding up something of (a) and (b) first, and testing how good it is. (I&rsquo;ve noticed that atleast half the time, (a) or (b) gives me a score of like 0.9 of the best, which is very good).<br/><br/>You&rsquo;d then have to add a concept of probability or a state-based comparison etc. Which means, you&rsquo;d <i>better ensure that your code is </i><b><i>modular</i></b><i>!!!</i> throughout.<br/><br/>The next thing you&rsquo;ll need to ensure, is that your code is efficient. The more your code &ldquo;searches&rdquo; for the best solution, the better your solution is after all. Which means that you&rsquo;ll need to ensure that calculating your metric is as efficient as possible, that your overall loops and data structures work as efficiently as possible etc.<br/><br/>Some things I&rsquo;ve had to do are:<br/>(a) <code class=\"prettyprint inline\">exp(b * log(a))</code> instead of <code class=\"prettyprint inline\">pow(a, b)</code><br/>(b) coding a Binary Indexed Tree to handle probability.<br/>Basically, putting in effort in making your code efficient is well worth it.<br/><br/>Finally, include &ldquo;time&rdquo; constraints into your code. This means that you should allow your code to &ldquo;search&rdquo; for a solution for as long as the specified time limit allows. Do this last, because this generally means that you&rsquo;re stuck and out of ideas as to how to &ldquo;in general&rdquo; improve your code.<br/><br/><br/>And of course, <b>read the forums</b> for how to get started. I have heard that TC forums are great for giving tips on various things, including hacks that you may need.<br/><br/>Also, the things I stated above aren&rsquo;t all that exist. There are other tricks you could use also, keep looking and you&rsquo;ll find them. :)</blockquote><span class=\"qlink_container\"><a href=\"https://www.quora.com/What-are-good-ways-to-learn-how-to-solve-Marathon-problems-on-top-coder/answer/Pradeep-George-Mathias\" target=\"_blank\">What are good ways to learn how to solve Marathon problems on top coder?</a></span>","reblog":{"comment":"<p>d) beam search: Maintain a set of K best states. Then expand the neighbourhood each of these states to some KN states, and then take the best K out of these. (Note that greedy mentioned above is beam search with K = 1).<br><br>Answer by Pradeep George Mathias:<blockquote>So I haven’t participated myself in any TC Marathon match, but I’m assuming that its similar to what you have in Codechef Long Contest tie-break problems.<br><br>Look at various techniques people use to get good solutions:<br>(a) <b>local search:</b> from each state, try to go to a nearby better state.<br>(b) <b>greedy:</b> same as above, here you’re going to best state in neighbourhood.<br><br>The problem with the above is that you may get stuck in local optima, so…<br>© <b>simulated annealing:</b> probabilistically go to the best state. As time goes, the relative probability of going to the best state increases.<br>(d) <b>beam search:</b> Maintain a set of K best states. Then expand the neighbourhood each of these states to some KN states, and then take the best K out of these. (Note that greedy mentioned above is beam search with K = 1).<br><br>For all the above methods, you’d need a metric, to calculate how good a particular state is.<br><br>In reality, you’d generally end up coding up something of (a) and (b) first, and testing how good it is. (I’ve noticed that atleast half the time, (a) or (b) gives me a score of like 0.9 of the best, which is very good).<br><br>You’d then have to add a concept of probability or a state-based comparison etc. Which means, you’d <i>better ensure that your code is </i><b><i>modular</i></b><i>!!!</i> throughout.<br><br>The next thing you’ll need to ensure, is that your code is efficient. The more your code “searches” for the best solution, the better your solution is after all. Which means that you’ll need to ensure that calculating your metric is as efficient as possible, that your overall loops and data structures work as efficiently as possible etc.<br><br>Some things I’ve had to do are:<br>(a) <code class=\"prettyprint inline\">exp(b * log(a))</code> instead of <code class=\"prettyprint inline\">pow(a, b)</code><br>(b) coding a Binary Indexed Tree to handle probability.<br>Basically, putting in effort in making your code efficient is well worth it.<br><br>Finally, include “time” constraints into your code. This means that you should allow your code to “search” for a solution for as long as the specified time limit allows. Do this last, because this generally means that you’re stuck and out of ideas as to how to “in general” improve your code.<br><br><br>And of course, <b>read the forums</b> for how to get started. I have heard that TC forums are great for giving tips on various things, including hacks that you may need.<br><br>Also, the things I stated above aren’t all that exist. There are other tricks you could use also, keep looking and you’ll find them. :)</blockquote><span class=\"qlink_container\"><a href=\"https://www.quora.com/What-are-good-ways-to-learn-how-to-solve-Marathon-problems-on-top-coder/answer/Pradeep-George-Mathias\" target=\"_blank\">What are good ways to learn how to solve Marathon problems on top coder?</a></span></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145354296821"},"content_raw":"<p>d) beam search: Maintain a set of K best states. Then expand the neighbourhood each of these states to some KN states, and then take the best K out of these. (Note that greedy mentioned above is beam search with K = 1).<br><br>Answer by Pradeep George Mathias:<blockquote>So I haven’t participated myself in any TC Marathon match, but I’m assuming that its similar to what you have in Codechef Long Contest tie-break problems.<br><br>Look at various techniques people use to get good solutions:<br>(a) <b>local search:</b> from each state, try to go to a nearby better state.<br>(b) <b>greedy:</b> same as above, here you’re going to best state in neighbourhood.<br><br>The problem with the above is that you may get stuck in local optima, so…<br>© <b>simulated annealing:</b> probabilistically go to the best state. As time goes, the relative probability of going to the best state increases.<br>(d) <b>beam search:</b> Maintain a set of K best states. Then expand the neighbourhood each of these states to some KN states, and then take the best K out of these. (Note that greedy mentioned above is beam search with K = 1).<br><br>For all the above methods, you’d need a metric, to calculate how good a particular state is.<br><br>In reality, you’d generally end up coding up something of (a) and (b) first, and testing how good it is. (I’ve noticed that atleast half the time, (a) or (b) gives me a score of like 0.9 of the best, which is very good).<br><br>You’d then have to add a concept of probability or a state-based comparison etc. Which means, you’d <i>better ensure that your code is </i><b><i>modular</i></b><i>!!!</i> throughout.<br><br>The next thing you’ll need to ensure, is that your code is efficient. The more your code “searches” for the best solution, the better your solution is after all. Which means that you’ll need to ensure that calculating your metric is as efficient as possible, that your overall loops and data structures work as efficiently as possible etc.<br><br>Some things I’ve had to do are:<br>(a) <code class=\"prettyprint inline\">exp(b * log(a))</code> instead of <code class=\"prettyprint inline\">pow(a, b)</code><br>(b) coding a Binary Indexed Tree to handle probability.<br>Basically, putting in effort in making your code efficient is well worth it.<br><br>Finally, include “time” constraints into your code. This means that you should allow your code to “search” for a solution for as long as the specified time limit allows. Do this last, because this generally means that you’re stuck and out of ideas as to how to “in general” improve your code.<br><br><br>And of course, <b>read the forums</b> for how to get started. I have heard that TC forums are great for giving tips on various things, including hacks that you may need.<br><br>Also, the things I stated above aren’t all that exist. There are other tricks you could use also, keep looking and you’ll find them. :)</blockquote><span class=\"qlink_container\"><a href=\"https://www.quora.com/What-are-good-ways-to-learn-how-to-solve-Marathon-problems-on-top-coder/answer/Pradeep-George-Mathias\" target=\"_blank\">What are good ways to learn how to solve Marathon problems on top coder?</a></span></p>","content":"<p><p>d) beam search: Maintain a set of K best states. Then expand the neighbourhood each of these states to some KN states, and then take the best K out of these. (Note that greedy mentioned above is beam search with K = 1).<br /><br />Answer by Pradeep George Mathias:</p><blockquote><p>So I haven&rsquo;t participated myself in any TC Marathon match, but I&rsquo;m assuming that its similar to what you have in Codechef Long Contest tie-break problems.<br /><br />Look at various techniques people use to get good solutions:<br />(a) <b>local search:</b> from each state, try to go to a nearby better state.<br />(b) <b>greedy:</b> same as above, here you&rsquo;re going to best state in neighbourhood.<br /><br />The problem with the above is that you may get stuck in local optima, so&hellip;<br />&copy; <b>simulated annealing:</b> probabilistically go to the best state. As time goes, the relative probability of going to the best state increases.<br />(d) <b>beam search:</b> Maintain a set of K best states. Then expand the neighbourhood each of these states to some KN states, and then take the best K out of these. (Note that greedy mentioned above is beam search with K = 1).<br /><br />For all the above methods, you&rsquo;d need a metric, to calculate how good a particular state is.<br /><br />In reality, you&rsquo;d generally end up coding up something of (a) and (b) first, and testing how good it is. (I&rsquo;ve noticed that atleast half the time, (a) or (b) gives me a score of like 0.9 of the best, which is very good).<br /><br />You&rsquo;d then have to add a concept of probability or a state-based comparison etc. Which means, you&rsquo;d <i>better ensure that your code is </i><b><i>modular</i></b><i>!!!</i> throughout.<br /><br />The next thing you&rsquo;ll need to ensure, is that your code is efficient. The more your code &ldquo;searches&rdquo; for the best solution, the better your solution is after all. Which means that you&rsquo;ll need to ensure that calculating your metric is as efficient as possible, that your overall loops and data structures work as efficiently as possible etc.<br /><br />Some things I&rsquo;ve had to do are:<br />(a) <code>exp(b * log(a))</code> instead of <code>pow(a, b)</code><br />(b) coding a Binary Indexed Tree to handle probability.<br />Basically, putting in effort in making your code efficient is well worth it.<br /><br />Finally, include &ldquo;time&rdquo; constraints into your code. This means that you should allow your code to &ldquo;search&rdquo; for a solution for as long as the specified time limit allows. Do this last, because this generally means that you&rsquo;re stuck and out of ideas as to how to &ldquo;in general&rdquo; improve your code.<br /><br /><br />And of course, <b>read the forums</b> for how to get started. I have heard that TC forums are great for giving tips on various things, including hacks that you may need.<br /><br />Also, the things I stated above aren&rsquo;t all that exist. There are other tricks you could use also, keep looking and you&rsquo;ll find them. :)</p></blockquote><a href=\"https://www.quora.com/What-are-good-ways-to-learn-how-to-solve-Marathon-problems-on-top-coder/answer/Pradeep-George-Mathias\" target=\"_blank\">What are good ways to learn how to solve Marathon problems on top coder?</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145353960891,"post_url":"https://tyb.tumblr.com/post/145353960891/which-are-the-10-algorithms-every-computer-science","slug":"which-are-the-10-algorithms-every-computer-science","date":"2016-06-03 13:18:08 GMT","timestamp":1464959888,"state":"published","format":"html","reblog_key":"nowcwznP","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27NnMsx","summary":"Which are the 10 algorithms every computer science student must implement at least once in life?","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"Which are the 10 algorithms every computer science student must implement at least once in life?","body":"Which are the 10 algorithms every computer science student must implement at least once in life? by Anonymous<br/><br/>Answer by Anonymous:<blockquote>More important than algorithms(just problems #$!%), the techniques/concepts residing at the base of such algorithms is more important.<br/><br/>There are broadly 4 ways in which classification of algorithms can be done.<br/><br/><ol><li><b><u>Classification by purpose</u></b></li></ol><br/>Each algorithm has a goal, for example, the purpose of the Quick Sort algorithm is to sort data in ascending or descending order. But the number of goals is infinite, and we have to group them by kind of purposes.<br/><br/>2.  <b><u>Classification by implementation</u></b><br/><ul><li><b>Recursive</b> or <b>iterative</b><br/>A recursive algorithm is one that calls itself repeatedly until a certain condition matches. It is a method common to functional programming. <br/>For example, the towers of hanoi problem is well understood in recursive implementation. Every recursive version has an iterative equivalent iterative, and vice versa.</li></ul><ul><li><b>Logical</b> or <b>procedural</b><br/>An algorithm may be viewed as controlled logical deduction. <br/>A logic component expresses the axioms which may be used in the computation and a control component determines the way in which deduction is applied to the axioms.</li><li><b>Serial</b> or <b>parallel                                                                                </b>Algorithms are usually discussed with the assumption that computers execute one instruction of an algorithm at a time. This is a serial algorithm, as opposed to parallel algorithms, which take advantage of computer architectures to process several instructions at once. <b>Sorting algorithms</b> can be parallelized efficiently.</li></ul><ul><li><b>Deterministic</b> or <b>non-deterministic</b><br/>Deterministic algorithms solve the problem with a predefined process whereas non-deterministic algorithm must perform guesses of best solution at each step through the use of heuristics.</li></ul><br/>3.   <b><u>Classification by design paradigm</u></b><br/><br/><ul><li><b>Divide and conquer</b><br/>A divide and conquer algorithm repeatedly reduces an instance of a problem to one or more smaller instances of the same problem (usually recursively), until the instances are small enough to solve easily. One such example of divide and conquer is merge sorting. The binary search algorithm is an example of a variant of divide and conquer called <b>decrease and conquer algorithm</b>, that solves an identical subproblem and uses the solution of this subproblem to solve the bigger problem. <br/> </li><li><b>Dynamic programming</b><br/>The shortest path in a weighted graph can be found by using the shortest path to the goal from all adjacent vertices. <br/>When the optimal solution to a problem can be constructed from optimal solutions to subproblems, using <b>dynamic programming avoids recomputing solutions</b> that have already been computed. <br/>- The main difference with the &ldquo;divide and conquer&rdquo; approach is, subproblems are independent in divide and conquer, where as the overlap of subproblems occur in dynamic programming. <br/>- Dynamic programming and <b>memoization</b> go together. The difference with straightforward recursion is in caching or memoization of recursive calls. Where subproblems are independent, this is useless. By using memoization or maintaining a table of subproblems already solved, dynamic programming reduces the exponential nature of many problems to polynomial complexity.<br/> </li><li><b>The greedy method</b><br/>A greedy algorithm is similar to a dynamic programming algorithm, but the difference is that solutions to the subproblems do not have to be known at each stage. Instead a &ldquo;greedy&rdquo; choice can be made of what looks the best solution for the moment. <br/>The most popular greedy algorithm is finding the minimal spanning tree as given by <b>Kruskal</b>.<br/> </li><li><b>Linear programming</b><br/>The problem is expressed as a set of linear inequalities and then an attempt is made to maximize or minimize the inputs. This can solve many problems such as the maximum flow for directed graphs, notably by using the simplex algorithm. <br/>A complex variant of linear programming is called <b>integer programming</b>, where the solution space is restricted to all integers.<br/> </li><li><b>Reduction</b> also called <b>transform and conquer</b><br/>Solve a problem by transforming it into another problem. A simple example:<b>finding the median</b> in an unsorted list is first translating this problem into sorting problem and finding the middle element in sorted list. The main goal of reduction is finding the simplest transformation possible.<br/> </li><li><b>Using graphs</b><br/>Many problems, such as playing chess, can be modeled as problems on graphs. A graph exploration algorithms are used. <br/>This category also includes the search algorithms and backtracking.<br/> </li><li><b>The probabilistic and heuristic paradigm</b> <br/><br/></li></ul><ol><li><b>Probabilistic</b> <br/>Those that make some choices randomly.</li><li><b>Genetic</b> <br/>Attempt to find solutions to problems by mimicking biological evolutionary processes, with a cycle of random mutations yielding successive generations of &ldquo;solutions&rdquo;. Thus, they emulate reproduction and &ldquo;survival of the fittest&rdquo;.</li><li><b>Heuristic</b> <br/>Whose general purpose is not to find an optimal solution, but an approximate solution where the time or resources to find a perfect solution are not practical.</li></ol><br/>_________________________<wbr></wbr>_________________________<wbr></wbr>________________<br/><br/><br/>You can look at <span class=\"qlink_container\"><a href=\"http://algorithm.daqwest.com/\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Algorithms Repository</a></span><br/><br/>1. <b>Searching and sorting algorithms</b> - <br/>Sorting algorithms include <a href=\"http://algorithm.daqwest.com/search?search=Quicksort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Quicksort</a> <a href=\"http://algorithm.daqwest.com/search?search=Merge+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Merge sort</a><a href=\"http://algorithm.daqwest.com/search?search=Heapsort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Heapsort</a><a href=\"http://algorithm.daqwest.com/search?search=Bubble+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Bubble sort</a><a href=\"http://algorithm.daqwest.com/search?search=Selection+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>,</a><a href=\"http://algorithm.daqwest.com/search?search=Insertion+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Insertion sort</a><a href=\"http://algorithm.daqwest.com/search?search=Radix+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Radix sort</a>. Other imp soting algorithms are <a href=\"http://algorithm.daqwest.com/?search=Topological+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Topological sort</a><a href=\"http://algorithm.daqwest.com/?search=Counting+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Counting sort</a><a href=\"http://algorithm.daqwest.com/?search=Shell+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Shell sort</a><br/>A comprehensive list can be found <a href=\"http://algorithm.daqwest.com/#Sequence\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>here</a>.<br/>Important searching algorithms include <a href=\"http://algorithm.daqwest.com/search?search=Breadth-first+search\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>breadth</a>/ <a href=\"http://algorithm.daqwest.com/search?search=Depth-first+search\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>depth</a> first  search, binary search etc.<br/><br/>2. <b>Dynamic Programming</b> &ndash; To name a few DP problems, <a href=\"http://algorithm.daqwest.com/search?search=Longest+common+subsequence+problem\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Longest Common Subsequence problem</a>, <a href=\"http://algorithm.daqwest.com/search?search=Knapsack+problem\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Knapsack</a>, <a href=\"http://algorithm.daqwest.com/search?search=Traveling+salesman+problem\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>travelling salesman problem</a> etc. A list of dynamic  programming algorithms can be found <a href=\"http://algorithm.daqwest.com/#Dynamic\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>here</a>.<br/><br/>3. <b>Graph algorithms</b> &ndash; Important graph algorithms are <a href=\"http://algorithm.daqwest.com/search?search=Dijkstra&amp;#x27;s%20algorithm\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Dijkstra</a>, <a href=\"http://algorithm.daqwest.com/search?search=Prim&amp;#x27;s%20algorithm\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Prim,</a> <a href=\"http://algorithm.daqwest.com/search?search=Kruskal&amp;#x27;s%20algorithm\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Kruskal</a>, <a href=\"http://algorithm.daqwest.com/search?search=Bellman%C3%A2%C2%80%C2%93Ford+algorithm\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Bellman-Ford</a>. A comprehensive list can be found <a href=\"http://algorithm.daqwest.com/#Graph\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>here</a>.<br/><br/><br/>Good luck !!!</blockquote><a href=\"https://www.quora.com/Which-are-the-10-algorithms-every-computer-science-student-must-implement-at-least-once-in-life/answers/1867566\" target=\"_blank\">Which are the 10 algorithms every computer science student must implement at least once in life?</a>","reblog":{"comment":"<p>Which are the 10 algorithms every computer science student must implement at least once in life? by Anonymous<br><br>Answer by Anonymous:<blockquote>More important than algorithms(just problems #$!%), the techniques/concepts residing at the base of such algorithms is more important.<br><br>There are broadly 4 ways in which classification of algorithms can be done.<br><br><ol><li><b><u>Classification by purpose</u></b></li></ol><br>Each algorithm has a goal, for example, the purpose of the Quick Sort algorithm is to sort data in ascending or descending order. But the number of goals is infinite, and we have to group them by kind of purposes.<br><br>2.  <b><u>Classification by implementation</u></b><br><ul><li><b>Recursive</b> or <b>iterative</b><br>A recursive algorithm is one that calls itself repeatedly until a certain condition matches. It is a method common to functional programming. <br>For example, the towers of hanoi problem is well understood in recursive implementation. Every recursive version has an iterative equivalent iterative, and vice versa.</li></ul><ul><li><b>Logical</b> or <b>procedural</b><br>An algorithm may be viewed as controlled logical deduction. <br>A logic component expresses the axioms which may be used in the computation and a control component determines the way in which deduction is applied to the axioms.</li><li><b>Serial</b> or <b>parallel                                                                                </b>Algorithms are usually discussed with the assumption that computers execute one instruction of an algorithm at a time. This is a serial algorithm, as opposed to parallel algorithms, which take advantage of computer architectures to process several instructions at once. <b>Sorting algorithms</b> can be parallelized efficiently.</li></ul><ul><li><b>Deterministic</b> or <b>non-deterministic</b><br>Deterministic algorithms solve the problem with a predefined process whereas non-deterministic algorithm must perform guesses of best solution at each step through the use of heuristics.</li></ul><br>3.   <b><u>Classification by design paradigm</u></b><br><br><ul><li><b>Divide and conquer</b><br>A divide and conquer algorithm repeatedly reduces an instance of a problem to one or more smaller instances of the same problem (usually recursively), until the instances are small enough to solve easily. One such example of divide and conquer is merge sorting. The binary search algorithm is an example of a variant of divide and conquer called <b>decrease and conquer algorithm</b>, that solves an identical subproblem and uses the solution of this subproblem to solve the bigger problem. <br> </li><li><b>Dynamic programming</b><br>The shortest path in a weighted graph can be found by using the shortest path to the goal from all adjacent vertices. <br>When the optimal solution to a problem can be constructed from optimal solutions to subproblems, using <b>dynamic programming avoids recomputing solutions</b> that have already been computed. <br>- The main difference with the “divide and conquer” approach is, subproblems are independent in divide and conquer, where as the overlap of subproblems occur in dynamic programming. <br>- Dynamic programming and <b>memoization</b> go together. The difference with straightforward recursion is in caching or memoization of recursive calls. Where subproblems are independent, this is useless. By using memoization or maintaining a table of subproblems already solved, dynamic programming reduces the exponential nature of many problems to polynomial complexity.<br> </li><li><b>The greedy method</b><br>A greedy algorithm is similar to a dynamic programming algorithm, but the difference is that solutions to the subproblems do not have to be known at each stage. Instead a “greedy” choice can be made of what looks the best solution for the moment. <br>The most popular greedy algorithm is finding the minimal spanning tree as given by <b>Kruskal</b>.<br> </li><li><b>Linear programming</b><br>The problem is expressed as a set of linear inequalities and then an attempt is made to maximize or minimize the inputs. This can solve many problems such as the maximum flow for directed graphs, notably by using the simplex algorithm. <br>A complex variant of linear programming is called <b>integer programming</b>, where the solution space is restricted to all integers.<br> </li><li><b>Reduction</b> also called <b>transform and conquer</b><br>Solve a problem by transforming it into another problem. A simple example:<b>finding the median</b> in an unsorted list is first translating this problem into sorting problem and finding the middle element in sorted list. The main goal of reduction is finding the simplest transformation possible.<br> </li><li><b>Using graphs</b><br>Many problems, such as playing chess, can be modeled as problems on graphs. A graph exploration algorithms are used. <br>This category also includes the search algorithms and backtracking.<br> </li><li><b>The probabilistic and heuristic paradigm</b> <br><br></li></ul><ol><li><b>Probabilistic</b> <br>Those that make some choices randomly.</li><li><b>Genetic</b> <br>Attempt to find solutions to problems by mimicking biological evolutionary processes, with a cycle of random mutations yielding successive generations of “solutions”. Thus, they emulate reproduction and “survival of the fittest”.</li><li><b>Heuristic</b> <br>Whose general purpose is not to find an optimal solution, but an approximate solution where the time or resources to find a perfect solution are not practical.</li></ol><br>_________________________<wbr></wbr>_________________________<wbr></wbr>________________<br><br><br>You can look at <span class=\"qlink_container\"><a href=\"http://algorithm.daqwest.com/\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Algorithms Repository</a></span><br><br>1. <b>Searching and sorting algorithms</b> - <br>Sorting algorithms include <a href=\"http://algorithm.daqwest.com/search?search=Quicksort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Quicksort</a> <a href=\"http://algorithm.daqwest.com/search?search=Merge+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Merge sort</a><a href=\"http://algorithm.daqwest.com/search?search=Heapsort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Heapsort</a><a href=\"http://algorithm.daqwest.com/search?search=Bubble+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Bubble sort</a><a href=\"http://algorithm.daqwest.com/search?search=Selection+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>,</a><a href=\"http://algorithm.daqwest.com/search?search=Insertion+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Insertion sort</a><a href=\"http://algorithm.daqwest.com/search?search=Radix+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Radix sort</a>. Other imp soting algorithms are <a href=\"http://algorithm.daqwest.com/?search=Topological+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Topological sort</a><a href=\"http://algorithm.daqwest.com/?search=Counting+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Counting sort</a><a href=\"http://algorithm.daqwest.com/?search=Shell+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Shell sort</a><br>A comprehensive list can be found <a href=\"http://algorithm.daqwest.com/#Sequence\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>here</a>.<br>Important searching algorithms include <a href=\"http://algorithm.daqwest.com/search?search=Breadth-first+search\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>breadth</a>/ <a href=\"http://algorithm.daqwest.com/search?search=Depth-first+search\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>depth</a> first  search, binary search etc.<br><br>2. <b>Dynamic Programming</b> – To name a few DP problems, <a href=\"http://algorithm.daqwest.com/search?search=Longest+common+subsequence+problem\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Longest Common Subsequence problem</a>, <a href=\"http://algorithm.daqwest.com/search?search=Knapsack+problem\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Knapsack</a>, <a href=\"http://algorithm.daqwest.com/search?search=Traveling+salesman+problem\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>travelling salesman problem</a> etc. A list of dynamic  programming algorithms can be found <a href=\"http://algorithm.daqwest.com/#Dynamic\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>here</a>.<br><br>3. <b>Graph algorithms</b> – Important graph algorithms are <a href=\"http://algorithm.daqwest.com/search?search=Dijkstra&amp;#x27;s%20algorithm\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Dijkstra</a>, <a href=\"http://algorithm.daqwest.com/search?search=Prim&amp;#x27;s%20algorithm\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Prim,</a> <a href=\"http://algorithm.daqwest.com/search?search=Kruskal&amp;#x27;s%20algorithm\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Kruskal</a>, <a href=\"http://algorithm.daqwest.com/search?search=Bellman%C3%A2%C2%80%C2%93Ford+algorithm\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Bellman-Ford</a>. A comprehensive list can be found <a href=\"http://algorithm.daqwest.com/#Graph\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>here</a>.<br><br><br>Good luck !!!</blockquote><a href=\"https://www.quora.com/Which-are-the-10-algorithms-every-computer-science-student-must-implement-at-least-once-in-life/answers/1867566\" target=\"_blank\">Which are the 10 algorithms every computer science student must implement at least once in life?</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145353960891"},"content_raw":"<p>Which are the 10 algorithms every computer science student must implement at least once in life? by Anonymous<br><br>Answer by Anonymous:<blockquote>More important than algorithms(just problems #$!%), the techniques/concepts residing at the base of such algorithms is more important.<br><br>There are broadly 4 ways in which classification of algorithms can be done.<br><br><ol><li><b><u>Classification by purpose</u></b></li></ol><br>Each algorithm has a goal, for example, the purpose of the Quick Sort algorithm is to sort data in ascending or descending order. But the number of goals is infinite, and we have to group them by kind of purposes.<br><br>2.  <b><u>Classification by implementation</u></b><br><ul><li><b>Recursive</b> or <b>iterative</b><br>A recursive algorithm is one that calls itself repeatedly until a certain condition matches. It is a method common to functional programming. <br>For example, the towers of hanoi problem is well understood in recursive implementation. Every recursive version has an iterative equivalent iterative, and vice versa.</li></ul><ul><li><b>Logical</b> or <b>procedural</b><br>An algorithm may be viewed as controlled logical deduction. <br>A logic component expresses the axioms which may be used in the computation and a control component determines the way in which deduction is applied to the axioms.</li><li><b>Serial</b> or <b>parallel                                                                                </b>Algorithms are usually discussed with the assumption that computers execute one instruction of an algorithm at a time. This is a serial algorithm, as opposed to parallel algorithms, which take advantage of computer architectures to process several instructions at once. <b>Sorting algorithms</b> can be parallelized efficiently.</li></ul><ul><li><b>Deterministic</b> or <b>non-deterministic</b><br>Deterministic algorithms solve the problem with a predefined process whereas non-deterministic algorithm must perform guesses of best solution at each step through the use of heuristics.</li></ul><br>3.   <b><u>Classification by design paradigm</u></b><br><br><ul><li><b>Divide and conquer</b><br>A divide and conquer algorithm repeatedly reduces an instance of a problem to one or more smaller instances of the same problem (usually recursively), until the instances are small enough to solve easily. One such example of divide and conquer is merge sorting. The binary search algorithm is an example of a variant of divide and conquer called <b>decrease and conquer algorithm</b>, that solves an identical subproblem and uses the solution of this subproblem to solve the bigger problem. <br> </li><li><b>Dynamic programming</b><br>The shortest path in a weighted graph can be found by using the shortest path to the goal from all adjacent vertices. <br>When the optimal solution to a problem can be constructed from optimal solutions to subproblems, using <b>dynamic programming avoids recomputing solutions</b> that have already been computed. <br>- The main difference with the “divide and conquer” approach is, subproblems are independent in divide and conquer, where as the overlap of subproblems occur in dynamic programming. <br>- Dynamic programming and <b>memoization</b> go together. The difference with straightforward recursion is in caching or memoization of recursive calls. Where subproblems are independent, this is useless. By using memoization or maintaining a table of subproblems already solved, dynamic programming reduces the exponential nature of many problems to polynomial complexity.<br> </li><li><b>The greedy method</b><br>A greedy algorithm is similar to a dynamic programming algorithm, but the difference is that solutions to the subproblems do not have to be known at each stage. Instead a “greedy” choice can be made of what looks the best solution for the moment. <br>The most popular greedy algorithm is finding the minimal spanning tree as given by <b>Kruskal</b>.<br> </li><li><b>Linear programming</b><br>The problem is expressed as a set of linear inequalities and then an attempt is made to maximize or minimize the inputs. This can solve many problems such as the maximum flow for directed graphs, notably by using the simplex algorithm. <br>A complex variant of linear programming is called <b>integer programming</b>, where the solution space is restricted to all integers.<br> </li><li><b>Reduction</b> also called <b>transform and conquer</b><br>Solve a problem by transforming it into another problem. A simple example:<b>finding the median</b> in an unsorted list is first translating this problem into sorting problem and finding the middle element in sorted list. The main goal of reduction is finding the simplest transformation possible.<br> </li><li><b>Using graphs</b><br>Many problems, such as playing chess, can be modeled as problems on graphs. A graph exploration algorithms are used. <br>This category also includes the search algorithms and backtracking.<br> </li><li><b>The probabilistic and heuristic paradigm</b> <br><br></li></ul><ol><li><b>Probabilistic</b> <br>Those that make some choices randomly.</li><li><b>Genetic</b> <br>Attempt to find solutions to problems by mimicking biological evolutionary processes, with a cycle of random mutations yielding successive generations of “solutions”. Thus, they emulate reproduction and “survival of the fittest”.</li><li><b>Heuristic</b> <br>Whose general purpose is not to find an optimal solution, but an approximate solution where the time or resources to find a perfect solution are not practical.</li></ol><br>_________________________<wbr></wbr>_________________________<wbr></wbr>________________<br><br><br>You can look at <span class=\"qlink_container\"><a href=\"http://algorithm.daqwest.com/\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Algorithms Repository</a></span><br><br>1. <b>Searching and sorting algorithms</b> - <br>Sorting algorithms include <a href=\"http://algorithm.daqwest.com/search?search=Quicksort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Quicksort</a> <a href=\"http://algorithm.daqwest.com/search?search=Merge+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Merge sort</a><a href=\"http://algorithm.daqwest.com/search?search=Heapsort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Heapsort</a><a href=\"http://algorithm.daqwest.com/search?search=Bubble+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Bubble sort</a><a href=\"http://algorithm.daqwest.com/search?search=Selection+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>,</a><a href=\"http://algorithm.daqwest.com/search?search=Insertion+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Insertion sort</a><a href=\"http://algorithm.daqwest.com/search?search=Radix+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Radix sort</a>. Other imp soting algorithms are <a href=\"http://algorithm.daqwest.com/?search=Topological+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Topological sort</a><a href=\"http://algorithm.daqwest.com/?search=Counting+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Counting sort</a><a href=\"http://algorithm.daqwest.com/?search=Shell+sort\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>, Shell sort</a><br>A comprehensive list can be found <a href=\"http://algorithm.daqwest.com/#Sequence\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>here</a>.<br>Important searching algorithms include <a href=\"http://algorithm.daqwest.com/search?search=Breadth-first+search\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>breadth</a>/ <a href=\"http://algorithm.daqwest.com/search?search=Depth-first+search\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>depth</a> first  search, binary search etc.<br><br>2. <b>Dynamic Programming</b> – To name a few DP problems, <a href=\"http://algorithm.daqwest.com/search?search=Longest+common+subsequence+problem\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Longest Common Subsequence problem</a>, <a href=\"http://algorithm.daqwest.com/search?search=Knapsack+problem\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Knapsack</a>, <a href=\"http://algorithm.daqwest.com/search?search=Traveling+salesman+problem\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>travelling salesman problem</a> etc. A list of dynamic  programming algorithms can be found <a href=\"http://algorithm.daqwest.com/#Dynamic\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>here</a>.<br><br>3. <b>Graph algorithms</b> – Important graph algorithms are <a href=\"http://algorithm.daqwest.com/search?search=Dijkstra&amp;#x27;s%20algorithm\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Dijkstra</a>, <a href=\"http://algorithm.daqwest.com/search?search=Prim&amp;#x27;s%20algorithm\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Prim,</a> <a href=\"http://algorithm.daqwest.com/search?search=Kruskal&amp;#x27;s%20algorithm\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Kruskal</a>, <a href=\"http://algorithm.daqwest.com/search?search=Bellman%C3%A2%C2%80%C2%93Ford+algorithm\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>Bellman-Ford</a>. A comprehensive list can be found <a href=\"http://algorithm.daqwest.com/#Graph\" rel=\"noopener nofollow\" target=\"_blank\" onclick=\"return Q.openUrl(this);\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"daqwest.com\")'>here</a>.<br><br><br>Good luck !!!</blockquote><a href=\"https://www.quora.com/Which-are-the-10-algorithms-every-computer-science-student-must-implement-at-least-once-in-life/answers/1867566\" target=\"_blank\">Which are the 10 algorithms every computer science student must implement at least once in life?</a></p>","content":"<p><p>Which are the 10 algorithms every computer science student must implement at least once in life? by Anonymous<br /><br />Answer by Anonymous:</p><blockquote><p>More important than algorithms(just problems #$!%), the techniques/concepts residing at the base of such algorithms is more important.<br /><br />There are broadly 4 ways in which classification of algorithms can be done.<br /><br /><ol><li><b>Classification by purpose</b></li></ol><br />Each algorithm has a goal, for example, the purpose of the Quick Sort algorithm is to sort data in ascending or descending order. But the number of goals is infinite, and we have to group them by kind of purposes.<br /><br />2.&nbsp; <b>Classification by implementation</b><br /><ul><li><b>Recursive</b> or <b>iterative</b><br />A recursive algorithm is one that calls itself repeatedly until a certain condition matches. It is a method common to functional programming. <br />For example, the towers of hanoi problem is well understood in recursive implementation. Every recursive version has an iterative equivalent iterative, and vice versa.</li></ul><ul><li><b>Logical</b> or <b>procedural</b><br />An algorithm may be viewed as controlled logical deduction. <br />A logic component expresses the axioms which may be used in the computation and a control component determines the way in which deduction is applied to the axioms.</li><li><b>Serial</b> or <b>parallel&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b>Algorithms are usually discussed with the assumption that computers execute one instruction of an algorithm at a time. This is a serial algorithm, as opposed to parallel algorithms, which take advantage of computer architectures to process several instructions at once. <b>Sorting algorithms</b> can be parallelized efficiently.</li></ul><ul><li><b>Deterministic</b> or <b>non-deterministic</b><br />Deterministic algorithms solve the problem with a predefined process whereas non-deterministic algorithm must perform guesses of best solution at each step through the use of heuristics.</li></ul><br />3.&nbsp;&nbsp; <b>Classification by design paradigm</b><br /><br /><ul><li><b>Divide and conquer</b><br />A divide and conquer algorithm repeatedly reduces an instance of a problem to one or more smaller instances of the same problem (usually recursively), until the instances are small enough to solve easily. One such example of divide and conquer is merge sorting. The binary search algorithm is an example of a variant of divide and conquer called <b>decrease and conquer algorithm</b>, that solves an identical subproblem and uses the solution of this subproblem to solve the bigger problem. <br />&nbsp;</li><li><b>Dynamic programming</b><br />The shortest path in a weighted graph can be found by using the shortest path to the goal from all adjacent vertices. <br />When the optimal solution to a problem can be constructed from optimal solutions to subproblems, using <b>dynamic programming avoids recomputing solutions</b> that have already been computed. <br />- The main difference with the &ldquo;divide and conquer&rdquo; approach is, subproblems are independent in divide and conquer, where as the overlap of subproblems occur in dynamic programming. <br />- Dynamic programming and <b>memoization</b> go together. The difference with straightforward recursion is in caching or memoization of recursive calls. Where subproblems are independent, this is useless. By using memoization or maintaining a table of subproblems already solved, dynamic programming reduces the exponential nature of many problems to polynomial complexity.<br />&nbsp;</li><li><b>The greedy method</b><br />A greedy algorithm is similar to a dynamic programming algorithm, but the difference is that solutions to the subproblems do not have to be known at each stage. Instead a &ldquo;greedy&rdquo; choice can be made of what looks the best solution for the moment. <br />The most popular greedy algorithm is finding the minimal spanning tree as given by <b>Kruskal</b>.<br />&nbsp;</li><li><b>Linear programming</b><br />The problem is expressed as a set of linear inequalities and then an attempt is made to maximize or minimize the inputs. This can solve many problems such as the maximum flow for directed graphs, notably by using the simplex algorithm. <br />A complex variant of linear programming is called <b>integer programming</b>, where the solution space is restricted to all integers.<br />&nbsp;</li><li><b>Reduction</b> also called <b>transform and conquer</b><br />Solve a problem by transforming it into another problem. A simple example:<b>finding the median</b> in an unsorted list is first translating this problem into sorting problem and finding the middle element in sorted list. The main goal of reduction is finding the simplest transformation possible.<br />&nbsp;</li><li><b>Using graphs</b><br />Many problems, such as playing chess, can be modeled as problems on graphs. A graph exploration algorithms are used. <br />This category also includes the search algorithms and backtracking.<br />&nbsp;</li><li><b>The probabilistic and heuristic paradigm</b> <br /><br /></li></ul><ol><li><b>Probabilistic</b> <br />Those that make some choices randomly.</li><li><b>Genetic</b> <br />Attempt to find solutions to problems by mimicking biological evolutionary processes, with a cycle of random mutations yielding successive generations of &ldquo;solutions&rdquo;. Thus, they emulate reproduction and &ldquo;survival of the fittest&rdquo;.</li><li><b>Heuristic</b> <br />Whose general purpose is not to find an optimal solution, but an approximate solution where the time or resources to find a perfect solution are not practical.</li></ol><br />__________________________________________________________________<br /><br /><br />You can look at <a href=\"http://algorithm.daqwest.com/\" target=\"_blank\">Algorithms Repository</a><br /><br />1. <b>Searching and sorting algorithms</b> - <br />Sorting algorithms include <a href=\"http://algorithm.daqwest.com/search?search=Quicksort\" target=\"_blank\">Quicksort</a> <a href=\"http://algorithm.daqwest.com/search?search=Merge+sort\" target=\"_blank\">, Merge sort</a><a href=\"http://algorithm.daqwest.com/search?search=Heapsort\" target=\"_blank\">, Heapsort</a><a href=\"http://algorithm.daqwest.com/search?search=Bubble+sort\" target=\"_blank\">, Bubble sort</a><a href=\"http://algorithm.daqwest.com/search?search=Selection+sort\" target=\"_blank\">,</a><a href=\"http://algorithm.daqwest.com/search?search=Insertion+sort\" target=\"_blank\">Insertion sort</a><a href=\"http://algorithm.daqwest.com/search?search=Radix+sort\" target=\"_blank\">, Radix sort</a>. Other imp soting algorithms are <a href=\"http://algorithm.daqwest.com/?search=Topological+sort\" target=\"_blank\">Topological sort</a><a href=\"http://algorithm.daqwest.com/?search=Counting+sort\" target=\"_blank\">, Counting sort</a><a href=\"http://algorithm.daqwest.com/?search=Shell+sort\" target=\"_blank\">, Shell sort</a><br />A comprehensive list can be found <a href=\"http://algorithm.daqwest.com/#Sequence\" target=\"_blank\">here</a>.<br />Important searching algorithms include <a href=\"http://algorithm.daqwest.com/search?search=Breadth-first+search\" target=\"_blank\">breadth</a>/ <a href=\"http://algorithm.daqwest.com/search?search=Depth-first+search\" target=\"_blank\">depth</a> first&nbsp; search, binary search etc.<br /><br />2. <b>Dynamic Programming</b> &ndash; To name a few DP problems, <a href=\"http://algorithm.daqwest.com/search?search=Longest+common+subsequence+problem\" target=\"_blank\">Longest Common Subsequence problem</a>, <a href=\"http://algorithm.daqwest.com/search?search=Knapsack+problem\" target=\"_blank\">Knapsack</a>, <a href=\"http://algorithm.daqwest.com/search?search=Traveling+salesman+problem\" target=\"_blank\">travelling salesman problem</a> etc. A list of dynamic&nbsp; programming algorithms can be found <a href=\"http://algorithm.daqwest.com/#Dynamic\" target=\"_blank\">here</a>.<br /><br />3. <b>Graph algorithms</b> &ndash; Important graph algorithms are <a href=\"http://algorithm.daqwest.com/search?search=Dijkstra&amp;#x27;s%20algorithm\" target=\"_blank\">Dijkstra</a>, <a href=\"http://algorithm.daqwest.com/search?search=Prim&amp;#x27;s%20algorithm\" target=\"_blank\">Prim,</a> <a href=\"http://algorithm.daqwest.com/search?search=Kruskal&amp;#x27;s%20algorithm\" target=\"_blank\">Kruskal</a>, <a href=\"http://algorithm.daqwest.com/search?search=Bellman%C3%A2%C2%80%C2%93Ford+algorithm\" target=\"_blank\">Bellman-Ford</a>. A comprehensive list can be found <a href=\"http://algorithm.daqwest.com/#Graph\" target=\"_blank\">here</a>.<br /><br /><br />Good luck !!!</p></blockquote><a href=\"https://www.quora.com/Which-are-the-10-algorithms-every-computer-science-student-must-implement-at-least-once-in-life/answers/1867566\" target=\"_blank\">Which are the 10 algorithms every computer science student must implement at least once in life?</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145353267256,"post_url":"https://tyb.tumblr.com/post/145353267256/what-are-some-of-the-best-life-tips","slug":"what-are-some-of-the-best-life-tips","date":"2016-06-03 12:53:50 GMT","timestamp":1464958430,"state":"published","format":"html","reblog_key":"O0Kf2u0f","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27NkjWu","summary":"What are some of the best life tips?","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"What are some of the best life tips?","body":"What are some of the best life tips? by Peter Mayer<br/><br/>Answer by Peter Mayer:<blockquote><p class=\"qtext_para\">Here are 55 life tips in the form of quotes:</p><p class=\"qtext_para\">1. &ldquo;If you want something you never had, you have to do something you&rsquo;ve never done.&rdquo;</p><p class=\"qtext_para\">2. &ldquo;Don&rsquo;t limit your challenges. Challenge your limits.&rdquo;</p><p class=\"qtext_para\">3. &ldquo;Do what is right, not what is easy.&rdquo;</p><p class=\"qtext_para\">4. &ldquo;If it does not challenge you, it won&rsquo;t change you.&rdquo;</p><p class=\"qtext_para\">5. &ldquo;Do more than just exist.&rdquo;</p><p class=\"qtext_para\">6. &ldquo;You are your only limit.&rdquo;</p><p class=\"qtext_para\">7. &ldquo;I don&rsquo;t stop when I am tired, I stop when I am done.&rdquo;</p><p class=\"qtext_para\">8. &ldquo;If there is no way, create one.&rdquo;</p><p class=\"qtext_para\">9. &ldquo;There are no regrets in life. Only lessons.&rdquo;</p><p class=\"qtext_para\">10. &ldquo;You can&rsquo;t start the next chapter of your life, if you are still reading the last one.&rdquo;</p><p class=\"qtext_para\">11. &ldquo;One day everything will make perfect sense.&rdquo;</p><p class=\"qtext_para\">12. &ldquo;Everything happens for a reason, even though that reason is not clear at the moment.&rdquo;</p><p class=\"qtext_para\">13. &ldquo;Whatever you&rsquo;re thinking, think bigger.&rdquo;</p><p class=\"qtext_para\">14. &ldquo;Your best teacher is your last mistake.&rdquo;</p><p class=\"qtext_para\">15. &ldquo;You were born to be real, not perfect.&rdquo;</p><p class=\"qtext_para\">16. &ldquo;It feels good to be lost in the right direction.&rdquo;</p><p class=\"qtext_para\">17. &ldquo;There is no elevator to success. You have to take the stairs.&rdquo;</p><p class=\"qtext_para\">18. &ldquo;Be somebody who makes everybody feel like a somebody.&rdquo;</p><p class=\"qtext_para\">19. &ldquo;Sometimes you just have to let it go.&rdquo;</p><p class=\"qtext_para\">20. &ldquo;Your life isn&rsquo;t yours, if you care what others think.&rdquo;</p><p class=\"qtext_para\">21. &ldquo;Everything is going to be OK at the end. If it is not OK, it is not the end.&rdquo;</p><p class=\"qtext_para\">22. &ldquo;Never apologize for being who you are.&rdquo;</p><p class=\"qtext_para\">23. &ldquo;Don&rsquo;t complain about things, you are not willing to change.&rdquo;</p><p class=\"qtext_para\">24. &ldquo;Create a life that feels good on the inside, not one that looks good on the outside.&rdquo;</p><p class=\"qtext_para\">25. &ldquo;Enjoy the little things in life, because one day you&rsquo;ll back and realize they were the big things.&rdquo;</p><p class=\"qtext_para\">26. &ldquo;Broken crayons still color.&rdquo;</p><p class=\"qtext_para\">27. &ldquo;Don&rsquo;t wait. Life goes faster than you think.&rdquo;</p><p class=\"qtext_para\">28. &ldquo;Only dead fish go with the flow.&rdquo;</p><p class=\"qtext_para\">29. &ldquo;Hard work beats talent.&rdquo;</p><p class=\"qtext_para\">30. &ldquo;In the end we only regret the chances we didn&rsquo;t take.&rdquo;</p><p class=\"qtext_para\">31. &ldquo;Sometimes just stop and look around and realize life indeed is amazing.&rdquo;</p><p class=\"qtext_para\">32. &ldquo;Collect moments, not things.&rdquo;</p><p class=\"qtext_para\">33. &ldquo;Your worst battle in life is between what you know and what you feel.&rdquo;</p><p class=\"qtext_para\">34. &ldquo;Life is 10% what happens to you, and 90% how you react to it.&rdquo;</p><p class=\"qtext_para\">35. &ldquo;Mistakes are proof that you are trying.&rdquo;</p><p class=\"qtext_para\">36. &ldquo;Everyday is a chance to change your life.&rdquo;</p><p class=\"qtext_para\">37. &ldquo;Sometimes life is about risking everything for a dream no one can see but you.&rdquo;</p><p class=\"qtext_para\">38. &ldquo;The best investment you can ever make is in yourself.&rdquo;</p><p class=\"qtext_para\">39. &ldquo;Remember when you forgive, you heal, and when you let go, you grow.&rdquo;</p><p class=\"qtext_para\">40. &ldquo;I believe in the person I want to become.&rdquo;</p><p class=\"qtext_para\">41. &ldquo;Change your thoughts and you change the world.&rdquo;</p><p class=\"qtext_para\">42. &ldquo;Sometimes you win, sometimes you learn.&rdquo;</p><p class=\"qtext_para\">43. &ldquo;To change your life, you need to change your priorities.&rdquo;</p><p class=\"qtext_para\">44. &ldquo;Never make permanent decisions on temporary feelings.&rdquo;</p><p class=\"qtext_para\">45. &ldquo;If it was easy, everybody would do it.&rdquo;</p><p class=\"qtext_para\">46. &ldquo;Stars can&rsquo;t shine without darkness.&rdquo;</p><p class=\"qtext_para\">47. &ldquo;The best way to project your future is to create it.&rdquo;</p><p class=\"qtext_para\">48. &ldquo;When life puts you in tough situations, don&rsquo;t say: Why me?, say: Try me!&rdquo;</p><p class=\"qtext_para\">49. &ldquo;The only disability in life is a bad attitude.&rdquo;</p><p class=\"qtext_para\">50. &ldquo;If the plan does not work, change the plan but not the goal.&rdquo;</p><p class=\"qtext_para\">51. &ldquo;What consumes your mind, control your life.&rdquo;</p><p class=\"qtext_para\">52. &ldquo;Wake up. Kick ass. Repeat.&rdquo;</p><p class=\"qtext_para\">53. &ldquo;Be busy working on your own grass to notice the neighbor&rsquo;s is greener.&rdquo;</p><p class=\"qtext_para\">54. &ldquo;Stay positive, work hard and make it happen.&rdquo;</p><p class=\"qtext_para\">55. </p><div class=\"qtext_image_wrapper\"><img class=\"landscape qtext_image zoomable_in zoomable_in_feed\" src=\"https://qph.is.quoracdn.net/main-qimg-22480c4c826c1a2fc1f0119c6f7f9cbc?convert_to_webp=true\" master_src=\"https://qph.is.quoracdn.net/main-qimg-1e41f9d4d92d872f40f42ded122023a1?convert_to_webp=true\" master_w=\"890\" master_h=\"593\"/></div></blockquote><span class=\"qlink_container\"><a href=\"https://www.quora.com/What-are-some-of-the-best-life-tips/answer/Peter-Mayer-5\" target=\"_blank\">What are some of the best life tips?</a></span>","reblog":{"comment":"<p>What are some of the best life tips? by Peter Mayer<br><br>Answer by Peter Mayer:<blockquote><p class=\"qtext_para\">Here are 55 life tips in the form of quotes:</p><p class=\"qtext_para\">1. “If you want something you never had, you have to do something you’ve never done.”</p><p class=\"qtext_para\">2. “Don’t limit your challenges. Challenge your limits.”</p><p class=\"qtext_para\">3. “Do what is right, not what is easy.”</p><p class=\"qtext_para\">4. “If it does not challenge you, it won’t change you.”</p><p class=\"qtext_para\">5. “Do more than just exist.”</p><p class=\"qtext_para\">6. “You are your only limit.”</p><p class=\"qtext_para\">7. “I don’t stop when I am tired, I stop when I am done.”</p><p class=\"qtext_para\">8. “If there is no way, create one.”</p><p class=\"qtext_para\">9. “There are no regrets in life. Only lessons.”</p><p class=\"qtext_para\">10. “You can’t start the next chapter of your life, if you are still reading the last one.”</p><p class=\"qtext_para\">11. “One day everything will make perfect sense.”</p><p class=\"qtext_para\">12. “Everything happens for a reason, even though that reason is not clear at the moment.”</p><p class=\"qtext_para\">13. “Whatever you’re thinking, think bigger.”</p><p class=\"qtext_para\">14. “Your best teacher is your last mistake.”</p><p class=\"qtext_para\">15. “You were born to be real, not perfect.”</p><p class=\"qtext_para\">16. “It feels good to be lost in the right direction.”</p><p class=\"qtext_para\">17. “There is no elevator to success. You have to take the stairs.”</p><p class=\"qtext_para\">18. “Be somebody who makes everybody feel like a somebody.”</p><p class=\"qtext_para\">19. “Sometimes you just have to let it go.”</p><p class=\"qtext_para\">20. “Your life isn’t yours, if you care what others think.”</p><p class=\"qtext_para\">21. “Everything is going to be OK at the end. If it is not OK, it is not the end.”</p><p class=\"qtext_para\">22. “Never apologize for being who you are.”</p><p class=\"qtext_para\">23. “Don’t complain about things, you are not willing to change.”</p><p class=\"qtext_para\">24. “Create a life that feels good on the inside, not one that looks good on the outside.”</p><p class=\"qtext_para\">25. “Enjoy the little things in life, because one day you’ll back and realize they were the big things.”</p><p class=\"qtext_para\">26. “Broken crayons still color.”</p><p class=\"qtext_para\">27. “Don’t wait. Life goes faster than you think.”</p><p class=\"qtext_para\">28. “Only dead fish go with the flow.”</p><p class=\"qtext_para\">29. “Hard work beats talent.”</p><p class=\"qtext_para\">30. “In the end we only regret the chances we didn’t take.”</p><p class=\"qtext_para\">31. “Sometimes just stop and look around and realize life indeed is amazing.”</p><p class=\"qtext_para\">32. “Collect moments, not things.”</p><p class=\"qtext_para\">33. “Your worst battle in life is between what you know and what you feel.”</p><p class=\"qtext_para\">34. “Life is 10% what happens to you, and 90% how you react to it.”</p><p class=\"qtext_para\">35. “Mistakes are proof that you are trying.”</p><p class=\"qtext_para\">36. “Everyday is a chance to change your life.”</p><p class=\"qtext_para\">37. “Sometimes life is about risking everything for a dream no one can see but you.”</p><p class=\"qtext_para\">38. “The best investment you can ever make is in yourself.”</p><p class=\"qtext_para\">39. “Remember when you forgive, you heal, and when you let go, you grow.”</p><p class=\"qtext_para\">40. “I believe in the person I want to become.”</p><p class=\"qtext_para\">41. “Change your thoughts and you change the world.”</p><p class=\"qtext_para\">42. “Sometimes you win, sometimes you learn.”</p><p class=\"qtext_para\">43. “To change your life, you need to change your priorities.”</p><p class=\"qtext_para\">44. “Never make permanent decisions on temporary feelings.”</p><p class=\"qtext_para\">45. “If it was easy, everybody would do it.”</p><p class=\"qtext_para\">46. “Stars can’t shine without darkness.”</p><p class=\"qtext_para\">47. “The best way to project your future is to create it.”</p><p class=\"qtext_para\">48. “When life puts you in tough situations, don’t say: Why me?, say: Try me!”</p><p class=\"qtext_para\">49. “The only disability in life is a bad attitude.”</p><p class=\"qtext_para\">50. “If the plan does not work, change the plan but not the goal.”</p><p class=\"qtext_para\">51. “What consumes your mind, control your life.”</p><p class=\"qtext_para\">52. “Wake up. Kick ass. Repeat.”</p><p class=\"qtext_para\">53. “Be busy working on your own grass to notice the neighbor’s is greener.”</p><p class=\"qtext_para\">54. “Stay positive, work hard and make it happen.”</p><p class=\"qtext_para\">55. </p><div class=\"qtext_image_wrapper\"><img class=\"landscape qtext_image zoomable_in zoomable_in_feed\" src=\"https://qph.is.quoracdn.net/main-qimg-22480c4c826c1a2fc1f0119c6f7f9cbc?convert_to_webp=true\" master_src=\"https://qph.is.quoracdn.net/main-qimg-1e41f9d4d92d872f40f42ded122023a1?convert_to_webp=true\" master_w=\"890\" master_h=\"593\"></div></blockquote><span class=\"qlink_container\"><a href=\"https://www.quora.com/What-are-some-of-the-best-life-tips/answer/Peter-Mayer-5\" target=\"_blank\">What are some of the best life tips?</a></span></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145353267256"},"content_raw":"<p>What are some of the best life tips? by Peter Mayer<br><br>Answer by Peter Mayer:<blockquote><p class=\"qtext_para\">Here are 55 life tips in the form of quotes:</p><p class=\"qtext_para\">1. “If you want something you never had, you have to do something you’ve never done.”</p><p class=\"qtext_para\">2. “Don’t limit your challenges. Challenge your limits.”</p><p class=\"qtext_para\">3. “Do what is right, not what is easy.”</p><p class=\"qtext_para\">4. “If it does not challenge you, it won’t change you.”</p><p class=\"qtext_para\">5. “Do more than just exist.”</p><p class=\"qtext_para\">6. “You are your only limit.”</p><p class=\"qtext_para\">7. “I don’t stop when I am tired, I stop when I am done.”</p><p class=\"qtext_para\">8. “If there is no way, create one.”</p><p class=\"qtext_para\">9. “There are no regrets in life. Only lessons.”</p><p class=\"qtext_para\">10. “You can’t start the next chapter of your life, if you are still reading the last one.”</p><p class=\"qtext_para\">11. “One day everything will make perfect sense.”</p><p class=\"qtext_para\">12. “Everything happens for a reason, even though that reason is not clear at the moment.”</p><p class=\"qtext_para\">13. “Whatever you’re thinking, think bigger.”</p><p class=\"qtext_para\">14. “Your best teacher is your last mistake.”</p><p class=\"qtext_para\">15. “You were born to be real, not perfect.”</p><p class=\"qtext_para\">16. “It feels good to be lost in the right direction.”</p><p class=\"qtext_para\">17. “There is no elevator to success. You have to take the stairs.”</p><p class=\"qtext_para\">18. “Be somebody who makes everybody feel like a somebody.”</p><p class=\"qtext_para\">19. “Sometimes you just have to let it go.”</p><p class=\"qtext_para\">20. “Your life isn’t yours, if you care what others think.”</p><p class=\"qtext_para\">21. “Everything is going to be OK at the end. If it is not OK, it is not the end.”</p><p class=\"qtext_para\">22. “Never apologize for being who you are.”</p><p class=\"qtext_para\">23. “Don’t complain about things, you are not willing to change.”</p><p class=\"qtext_para\">24. “Create a life that feels good on the inside, not one that looks good on the outside.”</p><p class=\"qtext_para\">25. “Enjoy the little things in life, because one day you’ll back and realize they were the big things.”</p><p class=\"qtext_para\">26. “Broken crayons still color.”</p><p class=\"qtext_para\">27. “Don’t wait. Life goes faster than you think.”</p><p class=\"qtext_para\">28. “Only dead fish go with the flow.”</p><p class=\"qtext_para\">29. “Hard work beats talent.”</p><p class=\"qtext_para\">30. “In the end we only regret the chances we didn’t take.”</p><p class=\"qtext_para\">31. “Sometimes just stop and look around and realize life indeed is amazing.”</p><p class=\"qtext_para\">32. “Collect moments, not things.”</p><p class=\"qtext_para\">33. “Your worst battle in life is between what you know and what you feel.”</p><p class=\"qtext_para\">34. “Life is 10% what happens to you, and 90% how you react to it.”</p><p class=\"qtext_para\">35. “Mistakes are proof that you are trying.”</p><p class=\"qtext_para\">36. “Everyday is a chance to change your life.”</p><p class=\"qtext_para\">37. “Sometimes life is about risking everything for a dream no one can see but you.”</p><p class=\"qtext_para\">38. “The best investment you can ever make is in yourself.”</p><p class=\"qtext_para\">39. “Remember when you forgive, you heal, and when you let go, you grow.”</p><p class=\"qtext_para\">40. “I believe in the person I want to become.”</p><p class=\"qtext_para\">41. “Change your thoughts and you change the world.”</p><p class=\"qtext_para\">42. “Sometimes you win, sometimes you learn.”</p><p class=\"qtext_para\">43. “To change your life, you need to change your priorities.”</p><p class=\"qtext_para\">44. “Never make permanent decisions on temporary feelings.”</p><p class=\"qtext_para\">45. “If it was easy, everybody would do it.”</p><p class=\"qtext_para\">46. “Stars can’t shine without darkness.”</p><p class=\"qtext_para\">47. “The best way to project your future is to create it.”</p><p class=\"qtext_para\">48. “When life puts you in tough situations, don’t say: Why me?, say: Try me!”</p><p class=\"qtext_para\">49. “The only disability in life is a bad attitude.”</p><p class=\"qtext_para\">50. “If the plan does not work, change the plan but not the goal.”</p><p class=\"qtext_para\">51. “What consumes your mind, control your life.”</p><p class=\"qtext_para\">52. “Wake up. Kick ass. Repeat.”</p><p class=\"qtext_para\">53. “Be busy working on your own grass to notice the neighbor’s is greener.”</p><p class=\"qtext_para\">54. “Stay positive, work hard and make it happen.”</p><p class=\"qtext_para\">55. </p><div class=\"qtext_image_wrapper\"><img class=\"landscape qtext_image zoomable_in zoomable_in_feed\" src=\"https://qph.is.quoracdn.net/main-qimg-22480c4c826c1a2fc1f0119c6f7f9cbc?convert_to_webp=true\" master_src=\"https://qph.is.quoracdn.net/main-qimg-1e41f9d4d92d872f40f42ded122023a1?convert_to_webp=true\" master_w=\"890\" master_h=\"593\"></div></blockquote><span class=\"qlink_container\"><a href=\"https://www.quora.com/What-are-some-of-the-best-life-tips/answer/Peter-Mayer-5\" target=\"_blank\">What are some of the best life tips?</a></span></p>","content":"<p><p>What are some of the best life tips? by Peter Mayer<br /><br />Answer by Peter Mayer:</p><blockquote><p>Here are 55 life tips in the form of quotes:</p><p>1. &ldquo;If you want something you never had, you have to do something you&rsquo;ve never done.&rdquo;</p><p>2. &ldquo;Don&rsquo;t limit your challenges. Challenge your limits.&rdquo;</p><p>3. &ldquo;Do what is right, not what is easy.&rdquo;</p><p>4. &ldquo;If it does not challenge you, it won&rsquo;t change you.&rdquo;</p><p>5. &ldquo;Do more than just exist.&rdquo;</p><p>6. &ldquo;You are your only limit.&rdquo;</p><p>7. &ldquo;I don&rsquo;t stop when I am tired, I stop when I am done.&rdquo;</p><p>8. &ldquo;If there is no way, create one.&rdquo;</p><p>9. &ldquo;There are no regrets in life. Only lessons.&rdquo;</p><p>10. &ldquo;You can&rsquo;t start the next chapter of your life, if you are still reading the last one.&rdquo;</p><p>11. &ldquo;One day everything will make perfect sense.&rdquo;</p><p>12. &ldquo;Everything happens for a reason, even though that reason is not clear at the moment.&rdquo;</p><p>13. &ldquo;Whatever you&rsquo;re thinking, think bigger.&rdquo;</p><p>14. &ldquo;Your best teacher is your last mistake.&rdquo;</p><p>15. &ldquo;You were born to be real, not perfect.&rdquo;</p><p>16. &ldquo;It feels good to be lost in the right direction.&rdquo;</p><p>17. &ldquo;There is no elevator to success. You have to take the stairs.&rdquo;</p><p>18. &ldquo;Be somebody who makes everybody feel like a somebody.&rdquo;</p><p>19. &ldquo;Sometimes you just have to let it go.&rdquo;</p><p>20. &ldquo;Your life isn&rsquo;t yours, if you care what others think.&rdquo;</p><p>21. &ldquo;Everything is going to be OK at the end. If it is not OK, it is not the end.&rdquo;</p><p>22. &ldquo;Never apologize for being who you are.&rdquo;</p><p>23. &ldquo;Don&rsquo;t complain about things, you are not willing to change.&rdquo;</p><p>24. &ldquo;Create a life that feels good on the inside, not one that looks good on the outside.&rdquo;</p><p>25. &ldquo;Enjoy the little things in life, because one day you&rsquo;ll back and realize they were the big things.&rdquo;</p><p>26. &ldquo;Broken crayons still color.&rdquo;</p><p>27. &ldquo;Don&rsquo;t wait. Life goes faster than you think.&rdquo;</p><p>28. &ldquo;Only dead fish go with the flow.&rdquo;</p><p>29. &ldquo;Hard work beats talent.&rdquo;</p><p>30. &ldquo;In the end we only regret the chances we didn&rsquo;t take.&rdquo;</p><p>31. &ldquo;Sometimes just stop and look around and realize life indeed is amazing.&rdquo;</p><p>32. &ldquo;Collect moments, not things.&rdquo;</p><p>33. &ldquo;Your worst battle in life is between what you know and what you feel.&rdquo;</p><p>34. &ldquo;Life is 10% what happens to you, and 90% how you react to it.&rdquo;</p><p>35. &ldquo;Mistakes are proof that you are trying.&rdquo;</p><p>36. &ldquo;Everyday is a chance to change your life.&rdquo;</p><p>37. &ldquo;Sometimes life is about risking everything for a dream no one can see but you.&rdquo;</p><p>38. &ldquo;The best investment you can ever make is in yourself.&rdquo;</p><p>39. &ldquo;Remember when you forgive, you heal, and when you let go, you grow.&rdquo;</p><p>40. &ldquo;I believe in the person I want to become.&rdquo;</p><p>41. &ldquo;Change your thoughts and you change the world.&rdquo;</p><p>42. &ldquo;Sometimes you win, sometimes you learn.&rdquo;</p><p>43. &ldquo;To change your life, you need to change your priorities.&rdquo;</p><p>44. &ldquo;Never make permanent decisions on temporary feelings.&rdquo;</p><p>45. &ldquo;If it was easy, everybody would do it.&rdquo;</p><p>46. &ldquo;Stars can&rsquo;t shine without darkness.&rdquo;</p><p>47. &ldquo;The best way to project your future is to create it.&rdquo;</p><p>48. &ldquo;When life puts you in tough situations, don&rsquo;t say: Why me?, say: Try me!&rdquo;</p><p>49. &ldquo;The only disability in life is a bad attitude.&rdquo;</p><p>50. &ldquo;If the plan does not work, change the plan but not the goal.&rdquo;</p><p>51. &ldquo;What consumes your mind, control your life.&rdquo;</p><p>52. &ldquo;Wake up. Kick ass. Repeat.&rdquo;</p><p>53. &ldquo;Be busy working on your own grass to notice the neighbor&rsquo;s is greener.&rdquo;</p><p>54. &ldquo;Stay positive, work hard and make it happen.&rdquo;</p><p>55. </p><p><div class=\"external-image-wrapper\" data-loading-text=\"Loading...\" data-src=\"https://qph.is.quoracdn.net/main-qimg-22480c4c826c1a2fc1f0119c6f7f9cbc?convert_to_webp=true\">External image</div></p></blockquote><a href=\"https://www.quora.com/What-are-some-of-the-best-life-tips/answer/Peter-Mayer-5\" target=\"_blank\">What are some of the best life tips?</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145307427951,"post_url":"https://tyb.tumblr.com/post/145307427951/10-greatest-westerns","slug":"10-greatest-westerns","date":"2016-06-02 14:42:13 GMT","timestamp":1464878533,"state":"published","format":"html","reblog_key":"2iqYsEtR","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27K-sHl","summary":"10 Greatest Westerns","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"10 Greatest Westerns","body":"Post on @Quora by @RobertFrost01: 10 Greatest Westerns<br/><br/>Post by Robert Frost:<blockquote>10 Greatest Westerns</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Westerns?srid=3dny&amp;share=9b9f279d\" target=\"_blank\">10 Greatest Westerns</a>","reblog":{"comment":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Westerns<br><br>Post by Robert Frost:<blockquote>10 Greatest Westerns</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Westerns?srid=3dny&share=9b9f279d\" target=\"_blank\">10 Greatest Westerns</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145307427951"},"content_raw":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Westerns<br><br>Post by Robert Frost:<blockquote>10 Greatest Westerns</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Westerns?srid=3dny&share=9b9f279d\" target=\"_blank\">10 Greatest Westerns</a></p>","content":"<p><p>Post on @Quora by @RobertFrost01: 10 Greatest Westerns<br /><br />Post by Robert Frost:</p><blockquote><p>10 Greatest Westerns</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Westerns?srid=3dny&amp;share=9b9f279d\" target=\"_blank\">10 Greatest Westerns</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145307291121,"post_url":"https://tyb.tumblr.com/post/145307291121/10-greatest-shakespearean-adaptations","slug":"10-greatest-shakespearean-adaptations","date":"2016-06-02 14:38:10 GMT","timestamp":1464878290,"state":"published","format":"html","reblog_key":"BZQiBSGG","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27K-Ktn","summary":"10 Greatest Shakespearean Adaptations","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"10 Greatest Shakespearean Adaptations","body":"Post on @Quora by @RobertFrost01: 10 Greatest Shakespearean Adaptations<br/><br/>Post by Robert Frost:<blockquote>10 Greatest Shakespearean Adaptations</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Shakespearean-Adaptations?srid=3dny&amp;share=dd3e5578\" target=\"_blank\">10 Greatest Shakespearean Adaptations</a>","reblog":{"comment":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Shakespearean Adaptations<br><br>Post by Robert Frost:<blockquote>10 Greatest Shakespearean Adaptations</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Shakespearean-Adaptations?srid=3dny&share=dd3e5578\" target=\"_blank\">10 Greatest Shakespearean Adaptations</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145307291121"},"content_raw":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Shakespearean Adaptations<br><br>Post by Robert Frost:<blockquote>10 Greatest Shakespearean Adaptations</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Shakespearean-Adaptations?srid=3dny&share=dd3e5578\" target=\"_blank\">10 Greatest Shakespearean Adaptations</a></p>","content":"<p><p>Post on @Quora by @RobertFrost01: 10 Greatest Shakespearean Adaptations<br /><br />Post by Robert Frost:</p><blockquote><p>10 Greatest Shakespearean Adaptations</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Shakespearean-Adaptations?srid=3dny&amp;share=dd3e5578\" target=\"_blank\">10 Greatest Shakespearean Adaptations</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145307160576,"post_url":"https://tyb.tumblr.com/post/145307160576/10-greatest-erotic-movies","slug":"10-greatest-erotic-movies","date":"2016-06-02 14:34:15 GMT","timestamp":1464878055,"state":"published","format":"html","reblog_key":"cqmnPJJH","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27K_r00","summary":"10 Greatest Erotic Movies","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"10 Greatest Erotic Movies","body":"Post on @Quora by @RobertFrost01: 10 Greatest Erotic Movies<br/><br/>Post by Robert Frost:<blockquote>10 Greatest Erotic Movies</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Erotic-Movies?srid=3dny&amp;share=8f6f4c4f\" target=\"_blank\">10 Greatest Erotic Movies</a>","reblog":{"comment":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Erotic Movies<br><br>Post by Robert Frost:<blockquote>10 Greatest Erotic Movies</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Erotic-Movies?srid=3dny&share=8f6f4c4f\" target=\"_blank\">10 Greatest Erotic Movies</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145307160576"},"content_raw":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Erotic Movies<br><br>Post by Robert Frost:<blockquote>10 Greatest Erotic Movies</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Erotic-Movies?srid=3dny&share=8f6f4c4f\" target=\"_blank\">10 Greatest Erotic Movies</a></p>","content":"<p><p>Post on @Quora by @RobertFrost01: 10 Greatest Erotic Movies<br /><br />Post by Robert Frost:</p><blockquote><p>10 Greatest Erotic Movies</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Erotic-Movies?srid=3dny&amp;share=8f6f4c4f\" target=\"_blank\">10 Greatest Erotic Movies</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145307043126,"post_url":"https://tyb.tumblr.com/post/145307043126/10-greatest-films-of-kenneth-branagh","slug":"10-greatest-films-of-kenneth-branagh","date":"2016-06-02 14:30:40 GMT","timestamp":1464877840,"state":"published","format":"html","reblog_key":"ziVZbXST","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27K_OKs","summary":"10 Greatest Films of Kenneth Branagh","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"10 Greatest Films of Kenneth Branagh","body":"Post on @Quora by @RobertFrost01: 10 Greatest Films of Kenneth Branagh<br/><br/>Post by Robert Frost:<blockquote>10 Greatest Films of Kenneth Branagh</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-Kenneth-Branagh?srid=3dny&amp;share=b9f3e9e3\" target=\"_blank\">10 Greatest Films of Kenneth Branagh</a>","reblog":{"comment":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Films of Kenneth Branagh<br><br>Post by Robert Frost:<blockquote>10 Greatest Films of Kenneth Branagh</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-Kenneth-Branagh?srid=3dny&share=b9f3e9e3\" target=\"_blank\">10 Greatest Films of Kenneth Branagh</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145307043126"},"content_raw":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Films of Kenneth Branagh<br><br>Post by Robert Frost:<blockquote>10 Greatest Films of Kenneth Branagh</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-Kenneth-Branagh?srid=3dny&share=b9f3e9e3\" target=\"_blank\">10 Greatest Films of Kenneth Branagh</a></p>","content":"<p><p>Post on @Quora by @RobertFrost01: 10 Greatest Films of Kenneth Branagh<br /><br />Post by Robert Frost:</p><blockquote><p>10 Greatest Films of Kenneth Branagh</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-Kenneth-Branagh?srid=3dny&amp;share=b9f3e9e3\" target=\"_blank\">10 Greatest Films of Kenneth Branagh</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145306872216,"post_url":"https://tyb.tumblr.com/post/145306872216/10-greatest-road-films","slug":"10-greatest-road-films","date":"2016-06-02 14:25:17 GMT","timestamp":1464877517,"state":"published","format":"html","reblog_key":"QQs2LWxL","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27KzkcO","summary":"10 Greatest Road Films","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"10 Greatest Road Films","body":"Post on @Quora by @RobertFrost01: 10 Greatest Road Films<br/><br/>Post by Robert Frost:<blockquote>10 Greatest Road Films</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Road-Films?srid=3dny&amp;share=ac2ea0d7\" target=\"_blank\">10 Greatest Road Films</a>","reblog":{"comment":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Road Films<br><br>Post by Robert Frost:<blockquote>10 Greatest Road Films</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Road-Films?srid=3dny&share=ac2ea0d7\" target=\"_blank\">10 Greatest Road Films</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145306872216"},"content_raw":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Road Films<br><br>Post by Robert Frost:<blockquote>10 Greatest Road Films</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Road-Films?srid=3dny&share=ac2ea0d7\" target=\"_blank\">10 Greatest Road Films</a></p>","content":"<p><p>Post on @Quora by @RobertFrost01: 10 Greatest Road Films<br /><br />Post by Robert Frost:</p><blockquote><p>10 Greatest Road Films</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Road-Films?srid=3dny&amp;share=ac2ea0d7\" target=\"_blank\">10 Greatest Road Films</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145306795021,"post_url":"https://tyb.tumblr.com/post/145306795021/10-greatest-films-of-bill-murray","slug":"10-greatest-films-of-bill-murray","date":"2016-06-02 14:22:50 GMT","timestamp":1464877370,"state":"published","format":"html","reblog_key":"U0bvNvCq","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27KzRmD","summary":"10 Greatest Films of Bill Murray","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"10 Greatest Films of Bill Murray","body":"Post on @Quora by @RobertFrost01: 10 Greatest Films of Bill Murray<br/><br/>Post by Robert Frost:<blockquote>10 Greatest Films of Bill Murray</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-Bill-Murray?srid=3dny&amp;share=3d4c4c2c\" target=\"_blank\">10 Greatest Films of Bill Murray</a>","reblog":{"comment":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Films of Bill Murray<br><br>Post by Robert Frost:<blockquote>10 Greatest Films of Bill Murray</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-Bill-Murray?srid=3dny&share=3d4c4c2c\" target=\"_blank\">10 Greatest Films of Bill Murray</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145306795021"},"content_raw":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Films of Bill Murray<br><br>Post by Robert Frost:<blockquote>10 Greatest Films of Bill Murray</blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-Bill-Murray?srid=3dny&share=3d4c4c2c\" target=\"_blank\">10 Greatest Films of Bill Murray</a></p>","content":"<p><p>Post on @Quora by @RobertFrost01: 10 Greatest Films of Bill Murray<br /><br />Post by Robert Frost:</p><blockquote><p>10 Greatest Films of Bill Murray</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-Bill-Murray?srid=3dny&amp;share=3d4c4c2c\" target=\"_blank\">10 Greatest Films of Bill Murray</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145301377466,"post_url":"https://tyb.tumblr.com/post/145301377466/blog-recap-2015-most-mentioned-movies","slug":"blog-recap-2015-most-mentioned-movies","date":"2016-06-02 11:05:17 GMT","timestamp":1464865517,"state":"published","format":"html","reblog_key":"ILy8T3G4","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27Ken6w","summary":"Blog Recap 2015 - Most Mentioned Movies","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"Blog Recap 2015 - Most Mentioned Movies","body":"Post on @Quora by @RobertFrost01: Blog Recap 2015 - Most Mentioned Movies<br/><br/>Post by Robert Frost:<blockquote><p class=\"qtext_para\">Blog Recap 2015 - Most Mentioned Movies</p></blockquote><a href=\"https://greatestmovies.quora.com/Blog-Recap-2015-Most-Mentioned-Movies?srid=3dny&amp;share=158431ed\" target=\"_blank\">Blog Recap 2015 - Most Mentioned Movies</a>","reblog":{"comment":"<p>Post on @Quora by @RobertFrost01: Blog Recap 2015 - Most Mentioned Movies<br><br>Post by Robert Frost:<blockquote><p class=\"qtext_para\">Blog Recap 2015 - Most Mentioned Movies</p></blockquote><a href=\"https://greatestmovies.quora.com/Blog-Recap-2015-Most-Mentioned-Movies?srid=3dny&share=158431ed\" target=\"_blank\">Blog Recap 2015 - Most Mentioned Movies</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145301377466"},"content_raw":"<p>Post on @Quora by @RobertFrost01: Blog Recap 2015 - Most Mentioned Movies<br><br>Post by Robert Frost:<blockquote><p class=\"qtext_para\">Blog Recap 2015 - Most Mentioned Movies</p></blockquote><a href=\"https://greatestmovies.quora.com/Blog-Recap-2015-Most-Mentioned-Movies?srid=3dny&share=158431ed\" target=\"_blank\">Blog Recap 2015 - Most Mentioned Movies</a></p>","content":"<p><p>Post on @Quora by @RobertFrost01: Blog Recap 2015 - Most Mentioned Movies<br /><br />Post by Robert Frost:</p><blockquote><p>Blog Recap 2015 - Most Mentioned Movies</p></blockquote><a href=\"https://greatestmovies.quora.com/Blog-Recap-2015-Most-Mentioned-Movies?srid=3dny&amp;share=158431ed\" target=\"_blank\">Blog Recap 2015 - Most Mentioned Movies</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145301365911,"post_url":"https://tyb.tumblr.com/post/145301365911/10-greatest-westerns-of-the-last-15-years","slug":"10-greatest-westerns-of-the-last-15-years","date":"2016-06-02 11:04:46 GMT","timestamp":1464865486,"state":"published","format":"html","reblog_key":"sVMNNzFG","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27KekIN","summary":"10 Greatest Westerns of the Last 15 Years","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"10 Greatest Westerns of the Last 15 Years","body":"Post on @Quora by @RobertFrost01: 10 Greatest Westerns of the Last 15 Years<br/><br/>Post by Robert Frost:<blockquote><p class=\"qtext_para\">10 Greatest Westerns of the Last 15 Years</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Westerns-of-the-Last-15-Years?srid=3dny&amp;share=dac30f96\" target=\"_blank\">10 Greatest Westerns of the Last 15 Years</a>","reblog":{"comment":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Westerns of the Last 15 Years<br><br>Post by Robert Frost:<blockquote><p class=\"qtext_para\">10 Greatest Westerns of the Last 15 Years</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Westerns-of-the-Last-15-Years?srid=3dny&share=dac30f96\" target=\"_blank\">10 Greatest Westerns of the Last 15 Years</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145301365911"},"content_raw":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Westerns of the Last 15 Years<br><br>Post by Robert Frost:<blockquote><p class=\"qtext_para\">10 Greatest Westerns of the Last 15 Years</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Westerns-of-the-Last-15-Years?srid=3dny&share=dac30f96\" target=\"_blank\">10 Greatest Westerns of the Last 15 Years</a></p>","content":"<p><p>Post on @Quora by @RobertFrost01: 10 Greatest Westerns of the Last 15 Years<br /><br />Post by Robert Frost:</p><blockquote><p>10 Greatest Westerns of the Last 15 Years</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Westerns-of-the-Last-15-Years?srid=3dny&amp;share=dac30f96\" target=\"_blank\">10 Greatest Westerns of the Last 15 Years</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145301190671,"post_url":"https://tyb.tumblr.com/post/145301190671/10-greatest-films-of-jeff-bridges","slug":"10-greatest-films-of-jeff-bridges","date":"2016-06-02 10:57:08 GMT","timestamp":1464865028,"state":"published","format":"html","reblog_key":"kRO0BV6G","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27Ke3WF","summary":"10 Greatest Films of Jeff Bridges","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":1,"title":"10 Greatest Films of Jeff Bridges","body":"Post on @Quora by @RobertFrost01: 10 Greatest Films of Jeff Bridges  6.  Tucker: The Man and His Dream (1988) - A true life David and Goliath story where, because it&rsquo;s true, David gets his ass kicked.  Bridges plays Preston Tucker in this Francis Ford Coppola directed biopic.  Tucker built an absolutely beautiful car, but Ford, General Motors, and Chrysler were not interested in having a new competitor.<br/><br/>Post by Robert Frost:<blockquote><p class=\"qtext_para\">10 Greatest Films of Jeff Bridges</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-Jeff-Bridges?srid=3dny&amp;share=8a335c45\" target=\"_blank\">10 Greatest Films of Jeff Bridges</a>","reblog":{"comment":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Films of Jeff Bridges  6.  Tucker: The Man and His Dream (1988) - A true life David and Goliath story where, because it’s true, David gets his ass kicked.  Bridges plays Preston Tucker in this Francis Ford Coppola directed biopic.  Tucker built an absolutely beautiful car, but Ford, General Motors, and Chrysler were not interested in having a new competitor.<br><br>Post by Robert Frost:<blockquote><p class=\"qtext_para\">10 Greatest Films of Jeff Bridges</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-Jeff-Bridges?srid=3dny&amp;share=8a335c45\" target=\"_blank\">10 Greatest Films of Jeff Bridges</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145301190671"},"content_raw":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Films of Jeff Bridges  6.  Tucker: The Man and His Dream (1988) - A true life David and Goliath story where, because it’s true, David gets his ass kicked.  Bridges plays Preston Tucker in this Francis Ford Coppola directed biopic.  Tucker built an absolutely beautiful car, but Ford, General Motors, and Chrysler were not interested in having a new competitor.<br><br>Post by Robert Frost:<blockquote><p class=\"qtext_para\">10 Greatest Films of Jeff Bridges</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-Jeff-Bridges?srid=3dny&amp;share=8a335c45\" target=\"_blank\">10 Greatest Films of Jeff Bridges</a></p>","content":"<p><p>Post on @Quora by @RobertFrost01: 10 Greatest Films of Jeff Bridges&nbsp; 6.&nbsp; Tucker: The Man and His Dream (1988) - A true life David and Goliath story where, because it&rsquo;s true, David gets his ass kicked.&nbsp; Bridges plays Preston Tucker in this Francis Ford Coppola directed biopic.&nbsp; Tucker built an absolutely beautiful car, but Ford, General Motors, and Chrysler were not interested in having a new competitor.<br /><br />Post by Robert Frost:</p><blockquote><p>10 Greatest Films of Jeff Bridges</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-Jeff-Bridges?srid=3dny&amp;share=8a335c45\" target=\"_blank\">10 Greatest Films of Jeff Bridges</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":145301145756,"post_url":"https://tyb.tumblr.com/post/145301145756/10-greatest-films-of-the-1970s","slug":"10-greatest-films-of-the-1970s","date":"2016-06-02 10:55:09 GMT","timestamp":1464864909,"state":"published","format":"html","reblog_key":"WNqzk2OO","tags":[],"short_url":"https://tmblr.co/ZNF0Fy27KduYS","summary":"10 Greatest Films of the 1970s","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"10 Greatest Films of the 1970s","body":"Post on @Quora by @RobertFrost01: 10 Greatest Films of the 1970s<br/><br/>Post by Robert Frost:<blockquote><p class=\"qtext_para\">10 Greatest Films of the 1970s</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-the-1970s?srid=3dny&amp;share=0aed8c73\" target=\"_blank\">10 Greatest Films of the 1970s</a>","reblog":{"comment":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Films of the 1970s<br><br>Post by Robert Frost:<blockquote><p class=\"qtext_para\">10 Greatest Films of the 1970s</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-the-1970s?srid=3dny&share=0aed8c73\" target=\"_blank\">10 Greatest Films of the 1970s</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"145301145756"},"content_raw":"<p>Post on @Quora by @RobertFrost01: 10 Greatest Films of the 1970s<br><br>Post by Robert Frost:<blockquote><p class=\"qtext_para\">10 Greatest Films of the 1970s</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-the-1970s?srid=3dny&share=0aed8c73\" target=\"_blank\">10 Greatest Films of the 1970s</a></p>","content":"<p><p>Post on @Quora by @RobertFrost01: 10 Greatest Films of the 1970s<br /><br />Post by Robert Frost:</p><blockquote><p>10 Greatest Films of the 1970s</p></blockquote><a href=\"https://greatestmovies.quora.com/10-Greatest-Films-of-the-1970s?srid=3dny&amp;share=0aed8c73\" target=\"_blank\">10 Greatest Films of the 1970s</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":144193642691,"post_url":"https://tyb.tumblr.com/post/144193642691/what-is-a-permutation","slug":"what-is-a-permutation","date":"2016-05-11 10:54:18 GMT","timestamp":1462964058,"state":"published","format":"html","reblog_key":"WeWTuWc9","tags":[],"short_url":"https://tmblr.co/ZNF0Fy26Id633","summary":"What is a permutation?","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":1,"title":"What is a permutation?","body":"What is a permutation? by Mike Kayser<br/><br/>Answer by Mike Kayser:<blockquote><b>Informally: </b>A reordering.<br/><br/>If I have three objects arranged in a line on the table, there are 3!=6 ways to order them in that line. (Three ways to pick which one is on the left, times 2 ways to pick which one is in the middle, times exactly one way to pick the one on the right).<br/><br/><b>Formally:</b> a <i>bijection </i>from a set to itself. <br/><ul><li>A <i>bijection </i>in general is just a map from <span class=\"render_latex\">[math]X[/math]</span> to [math]Y[/math] where: <br/>(1) every element of [math]Y[/math] got mapped to by some element of [math]X[/math] (<i>surjective</i>), and <br/>(2) each element of [math]Y[/math] <u>doesn&rsquo;t</u> get mapped to by more than one element of [math]X[/math] (<i>injective</i>).</li><li>That&rsquo;s the same as saying that <u>every</u> element of [math]Y[/math] got mapped to by <u>one and only one</u> element of [math]X[/math].</li><li>In a bijection [math]f[/math] from [math]X[/math] to [math]X[/math], you can think of [math]f(x)[/math] as meaning roughly &ldquo;where do I put [math]x[/math]?&rdquo; and as [math]f(x)=y[/math] as meaning &ldquo;I put [math]x[/math] in [math]y[/math]&rsquo;s old position.&rdquo;</li><li>The bijective property we mentioned above is equivalent to ensuring that every &ldquo;old position&rdquo; is the &ldquo;new home&rdquo; for exactly one object in the set.</li></ul></blockquote><a href=\"https://www.quora.com/What-is-a-permutation/answer/Mike-Kayser\" target=\"_blank\">What is a permutation?</a>","reblog":{"comment":"<p>What is a permutation? by Mike Kayser<br><br>Answer by Mike Kayser:<blockquote><b>Informally: </b>A reordering.<br><br>If I have three objects arranged in a line on the table, there are 3!=6 ways to order them in that line. (Three ways to pick which one is on the left, times 2 ways to pick which one is in the middle, times exactly one way to pick the one on the right).<br><br><b>Formally:</b> a <i>bijection </i>from a set to itself. <br><ul><li>A <i>bijection </i>in general is just a map from <span class=\"render_latex\">[math]X[/math]</span> to [math]Y[/math] where: <br>(1) every element of [math]Y[/math] got mapped to by some element of [math]X[/math] (<i>surjective</i>), and <br>(2) each element of [math]Y[/math] <u>doesn’t</u> get mapped to by more than one element of [math]X[/math] (<i>injective</i>).</li><li>That’s the same as saying that <u>every</u> element of [math]Y[/math] got mapped to by <u>one and only one</u> element of [math]X[/math].</li><li>In a bijection [math]f[/math] from [math]X[/math] to [math]X[/math], you can think of [math]f(x)[/math] as meaning roughly “where do I put [math]x[/math]?” and as [math]f(x)=y[/math] as meaning “I put [math]x[/math] in [math]y[/math]’s old position.”</li><li>The bijective property we mentioned above is equivalent to ensuring that every “old position” is the “new home” for exactly one object in the set.</li></ul></blockquote><a href=\"https://www.quora.com/What-is-a-permutation/answer/Mike-Kayser\" target=\"_blank\">What is a permutation?</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"144193642691"},"content_raw":"<p>What is a permutation? by Mike Kayser<br><br>Answer by Mike Kayser:<blockquote><b>Informally: </b>A reordering.<br><br>If I have three objects arranged in a line on the table, there are 3!=6 ways to order them in that line. (Three ways to pick which one is on the left, times 2 ways to pick which one is in the middle, times exactly one way to pick the one on the right).<br><br><b>Formally:</b> a <i>bijection </i>from a set to itself. <br><ul><li>A <i>bijection </i>in general is just a map from <span class=\"render_latex\">[math]X[/math]</span> to [math]Y[/math] where: <br>(1) every element of [math]Y[/math] got mapped to by some element of [math]X[/math] (<i>surjective</i>), and <br>(2) each element of [math]Y[/math] <u>doesn’t</u> get mapped to by more than one element of [math]X[/math] (<i>injective</i>).</li><li>That’s the same as saying that <u>every</u> element of [math]Y[/math] got mapped to by <u>one and only one</u> element of [math]X[/math].</li><li>In a bijection [math]f[/math] from [math]X[/math] to [math]X[/math], you can think of [math]f(x)[/math] as meaning roughly “where do I put [math]x[/math]?” and as [math]f(x)=y[/math] as meaning “I put [math]x[/math] in [math]y[/math]’s old position.”</li><li>The bijective property we mentioned above is equivalent to ensuring that every “old position” is the “new home” for exactly one object in the set.</li></ul></blockquote><a href=\"https://www.quora.com/What-is-a-permutation/answer/Mike-Kayser\" target=\"_blank\">What is a permutation?</a></p>","content":"<p><p>What is a permutation? by Mike Kayser<br /><br />Answer by Mike Kayser:</p><blockquote><p><b>Informally: </b>A reordering.<br /><br />If I have three objects arranged in a line on the table, there are 3!=6 ways to order them in that line. (Three ways to pick which one is on the left, times 2 ways to pick which one is in the middle, times exactly one way to pick the one on the right).<br /><br /><b>Formally:</b> a <i>bijection </i>from a set to itself. <br /><ul><li>A <i>bijection </i>in general is just a map from [math]X[/math] to [math]Y[/math] where: <br />(1) every element of [math]Y[/math] got mapped to by some element of [math]X[/math] (<i>surjective</i>), and <br />(2) each element of [math]Y[/math] doesn&rsquo;t get mapped to by more than one element of [math]X[/math] (<i>injective</i>).</li><li>That&rsquo;s the same as saying that every element of [math]Y[/math] got mapped to by one and only one element of [math]X[/math].</li><li>In a bijection [math]f[/math] from [math]X[/math] to [math]X[/math], you can think of [math]f(x)[/math] as meaning roughly &ldquo;where do I put [math]x[/math]?&rdquo; and as [math]f(x)=y[/math] as meaning &ldquo;I put [math]x[/math] in [math]y[/math]&rsquo;s old position.&rdquo;</li><li>The bijective property we mentioned above is equivalent to ensuring that every &ldquo;old position&rdquo; is the &ldquo;new home&rdquo; for exactly one object in the set.</li></ul></p></blockquote><a href=\"https://www.quora.com/What-is-a-permutation/answer/Mike-Kayser\" target=\"_blank\">What is a permutation?</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":141894778501,"post_url":"https://tyb.tumblr.com/post/141894778501/what-algorithms-every-software-engineer-should","slug":"what-algorithms-every-software-engineer-should","date":"2016-03-29 12:17:12 GMT","timestamp":1459253832,"state":"published","format":"html","reblog_key":"VnG8BCQX","tags":[],"short_url":"https://tmblr.co/ZNF0Fy249bdw5","summary":"What algorithms every software engineer should know?","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"What algorithms every software engineer should know?","body":"Answer on @Quora by Gabriel Cojocaru to What algorithms every software engineer should know?  1. Divide and Conquer - A divide and conquer algorithm works by recursively breaking down a problem into two or more sub-problems of the same (or related) type (divide), until these become simple enough to be solved directly (conquer). The solutions to the sub-problems are then combined to give a solution to the original problem.  This divide and conquer technique is the basis of efficient algorithms for all kinds of problems, such as   (e.g., QuickSort , Merge Sort ), multiplying large numbers (e.g. Karatsuba), syntactic analysis (e.g., top-down parsers), and computing the discrete Fourier transform (FFTs).  2. Dynamic Programming -  is a method for solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once, and storing their solutions - ideally, using a memory-based data structure. The next time the same subproblem occurs, instead of recomputing its solution, one simply looks up the previously computed solution, thereby saving computation time at the expense of a (hopefully) modest expenditure in storage space. (Each of the subproblem solutions is indexed in some way, typically based on the values of its input parameters, so as to facilitate its lookup.) The technique of storing solutions to subproblems instead of recomputing them is called &ldquo;memoization&rdquo;.  Dynamic programming algorithms are used for optimization (for example, finding the shortest path between two points, or the fastest way to multiply many matrices). A dynamic programming algorithm will examine the previously solved subproblems and will combine their solutions to give the best solution for the given problem. The alternatives are many, such as using a Greedy Algorithm, which picks the locally optimal choice at each branch in the road. The locally optimal choice may be a poor choice for the overall solution. While a greedy algorithm does not guarantee an optimal solution, it is often faster to calculate. Fortunately, some greedy algorithms (such as Minimum Spanning Tree ) are proven to lead to the optimal solution.  3. Graph Algorithms - Graphs can be used to model many types of relations and processes in physical, biological,social and information systems. Many practical problems can be represented by graphs.  In computer science, graphs are used to represent networks of communication, data organization, computational devices, the flow of computation, etc. For instance, the link structure of a website can be represented by a directed graph, in which the vertices represent web pages and directed edges represent links from one page to another. A similar approach can be taken to problems in travel, biology, computer chip design, and many other fields. The development of algorithms to handle graphs is therefore of major interest in computer science. The transformation of graphs is often formalized and represented by graph rewrite systems. Complementary to graph transformation systems focusing on rule-based in-memory manipulation of graphs are graph databases geared towards transaction-safe, persistent storing and querying of graph-structured data.  4. Greedy Algorithm - is an algorithm that follows the problem solving heuristic of making the locally optimal choice at each stage with the hope of finding a global optimum. In many problems, a greedy strategy does not in general produce an optimal solution, but nonetheless a greedy heuristic may yield locally optimal solutions that approximate a global optimal solution in a reasonable time.  For example, a greedy strategy for the Travelling Salesman Problem  (which is of a high computational complexity) is the following heuristic: &ldquo;At each stage visit an unvisited city nearest to the current city&rdquo;. This heuristic need not find a best solution, but terminates in a reasonable number of steps; finding an optimal solution typically requires unreasonably many steps. In mathematical optimization, greedy algorithms solve combinatorial problems having the properties of matroids.   5. Backtracking - is a general   wikipedia.org  algorithm for finding all (or some) solutions to some computational problems, notably constraint satisfaction problems, that incrementally builds candidates to the solutions, and abandons each partial candidate c (&ldquo;backtracks&rdquo;) as soon as it determines that c cannot possibly be completed to a valid solution.  The classic textbook example of the use of backtracking is the eight queens puzzle, that asks for all arrangements of eight chess queens on a standard chessboard so that no queen attacks any other. In the common backtracking approach, the partial candidates are arrangements of k queens in the first k rows of the board, all in different rows and columns. Any partial solution that contains two mutually attacking queens can be abandoned.  Backtracking can be applied only for problems which admit the concept of a &ldquo;partial candidate solution&rdquo; and a relatively quick test of whether it can possibly be completed to a valid solution. It is useless, for example, for locating a given value in an unordered table. When it is applicable, however, backtracking is often much faster than brute force enumeration of all complete candidates, since it can eliminate a large number of candidates with a single test.<br/><br/>Answer by Gabriel Cojocaru:<blockquote><b><a href=\"http://www.codingeek.org\" target=\"_blank\">www.codingeek.org</a> </b><br/><br/>1. <span class=\"qlink_container\"><a href=\"http://codingeek.org/category/algorithms/divide-and-conquer/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Divide and Conquer</b></a></span> - A divide and conquer <a href=\"https://en.wikipedia.org/wiki/Algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>algorithm</a> works by recursively breaking down a problem into two or more sub-problems of the same (or related) type (<b>divide</b>), until these become simple enough to be solved directly (<b>conquer</b>). The solutions to the sub-problems are then combined to give a solution to the original problem.<br/><br/>This divide and conquer technique is the basis of efficient algorithms for all kinds of problems, such as   (e.g., <a href=\"http://codingeek.org/algorithms/quicksort/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>QuickSort</a> , <a href=\"http://codingeek.org/algorithms/merge-sort/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>Merge Sort</a> ), <a href=\"https://en.wikipedia.org/wiki/Multiplication_algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>multiplying large numbers</a> (e.g. <a href=\"https://en.wikipedia.org/wiki/Karatsuba_algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>Karatsuba</a>), <a href=\"https://en.wikipedia.org/wiki/Syntactic_analysis\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>syntactic analysis</a> (e.g., <a href=\"https://en.wikipedia.org/wiki/Top-down_parser\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>top-down parsers</a>), and computing the <a href=\"https://en.wikipedia.org/wiki/Discrete_Fourier_transform\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>discrete Fourier transform</a> (<a href=\"https://en.wikipedia.org/wiki/Fast_Fourier_transform\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>FFTs</a>).<br/><br/>2. <a href=\"http://codingeek.org/category/algorithms/dynamic-programming/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Dynamic Programming</b></a> -  is a method for solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once, and storing their solutions - ideally, using a memory-based data structure. The next time the same subproblem occurs, instead of recomputing its solution, one simply looks up the previously computed solution, thereby saving computation time at the expense of a (hopefully) modest expenditure in storage space. (Each of the subproblem solutions is indexed in some way, typically based on the values of its input parameters, so as to facilitate its lookup.) The technique of storing solutions to subproblems instead of recomputing them is called &ldquo;<a href=\"https://en.wikipedia.org/wiki/Memoization\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>memoization</a>&rdquo;.<br/><br/>Dynamic programming algorithms are used for optimization (for example, finding the shortest path between two points, or the fastest way to multiply many matrices). A dynamic programming algorithm will examine the previously solved subproblems and will combine their solutions to give the best solution for the given problem. The alternatives are many, such as using a <a href=\"http://codingeek.org/category/algorithms/greedy-algorithms/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>Greedy Algorithm</a>, which picks the locally optimal choice at each branch in the road. The locally optimal choice may be a poor choice for the overall solution. While a greedy algorithm does not guarantee an optimal solution, it is often faster to calculate. Fortunately, some greedy algorithms (such as <a href=\"http://codingeek.org/algorithms/prims-minimum-spanning-tree-mst/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>Minimum Spanning Tree</a> ) are proven to lead to the optimal solution.<br/><br/>3.<b> </b><a href=\"http://codingeek.org/category/algorithms/graph-algorithms/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Graph Algorithms</b></a> - Graphs can be used to model many types of relations and processes in physical, biological,social and information systems. Many practical problems can be represented by graphs.<br/><br/>In <a href=\"https://en.wikipedia.org/wiki/Computer_science\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>computer science</a>, graphs are used to represent networks of communication, data organization, computational devices, the flow of computation, etc. For instance, the link structure of a <a href=\"https://en.wikipedia.org/wiki/Website\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>website</a> can be represented by a directed graph, in which the vertices represent web pages and directed edges represent <a href=\"https://en.wikipedia.org/wiki/Hyperlink\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>links</a> from one page to another. A similar approach can be taken to problems in travel, biology, computer chip design, and many other fields. The development of <a href=\"https://en.wikipedia.org/wiki/Algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>algorithms</a> to handle graphs is therefore of major interest in computer science. The <a href=\"https://en.wikipedia.org/wiki/Graph_transformation\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>transformation of graphs</a> is often formalized and represented by <a href=\"https://en.wikipedia.org/wiki/Graph_rewriting\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>graph rewrite systems</a>. Complementary to <a href=\"https://en.wikipedia.org/wiki/Graph_transformation\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>graph transformation</a> systems focusing on rule-based in-memory manipulation of graphs are <a href=\"https://en.wikipedia.org/wiki/Graph_database\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>graph databases</a> geared towards <a href=\"https://en.wikipedia.org/wiki/Database_transaction\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>transaction</a>-safe, <a href=\"https://en.wikipedia.org/wiki/Persistence_(computer_science)\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>persistent</a> storing and querying of <a href=\"https://en.wikipedia.org/wiki/Graph_(data_structure)\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>graph-structured data</a>.<br/><br/>4. <a href=\"http://codingeek.org/category/algorithms/greedy-algorithms/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Greedy Algorithm</b></a> - is an <a href=\"https://en.wikipedia.org/wiki/Algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>algorithm</a> that follows the <a href=\"https://en.wikipedia.org/wiki/Problem_solving\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>problem solving</a> <a href=\"https://en.wikipedia.org/wiki/Heuristic_(computer_science)\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>heuristic</a> of making the locally optimal choice at each stage with the hope of finding a global optimum. In many problems, a greedy strategy does not in general produce an optimal solution, but nonetheless a greedy heuristic may yield locally optimal solutions that approximate a global optimal solution in a reasonable time.<br/><br/>For example, a greedy strategy for the <a href=\"http://codingeek.org/algorithms/travelling-salesman-problem/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>Travelling Salesman Problem</a>  (which is of a high computational complexity) is the following heuristic: &ldquo;At each stage visit an unvisited city nearest to the current city&rdquo;. This heuristic need not find a best solution, but terminates in a reasonable number of steps; finding an optimal solution typically requires unreasonably many steps. In <a href=\"https://en.wikipedia.org/wiki/Mathematical_optimization\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>mathematical optimization</a>, greedy algorithms solve <a href=\"https://en.wikipedia.org/wiki/Combinatorial_optimization\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>combinatorial problems</a> having the properties of <a href=\"https://en.wikipedia.org/wiki/Matroid\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>matroids</a>.<br/><br/><br/>5. <a href=\"http://codingeek.org/category/algorithms/backtracking/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Backtracking</b></a> - is a general <a href=\"https://en.wikipedia.org/wiki/Algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>algorithm</a> for finding all (or some) solutions to some <a href=\"https://en.wikipedia.org/wiki/Computational_problem\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>computational problems</a>, notably <a href=\"https://en.wikipedia.org/wiki/Constraint_satisfaction_problem\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>constraint satisfaction problems</a>, that incrementally builds candidates to the solutions, and abandons each partial candidate <i>c</i> (&ldquo;backtracks&rdquo;) as soon as it determines that <i>c</i> cannot possibly be completed to a valid solution.<br/><br/>The classic textbook example of the use of backtracking is the <a href=\"https://en.wikipedia.org/wiki/Eight_queens_puzzle\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>eight queens puzzle</a>, that asks for all arrangements of eight <a href=\"https://en.wikipedia.org/wiki/Chess\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>chess</a> <a href=\"https://en.wikipedia.org/wiki/Queen_(chess)\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>queens</a> on a standard <a href=\"https://en.wikipedia.org/wiki/Chessboard\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>chessboard</a> so that no queen attacks any other. In the common backtracking approach, the partial candidates are arrangements of <i>k </i>queens in the first <i>k</i> rows of the board, all in different rows and columns. Any partial solution that contains two mutually attacking queens can be abandoned.<br/><br/>Backtracking can be applied only for problems which admit the concept of a &ldquo;partial candidate solution&rdquo; and a relatively quick test of whether it can possibly be completed to a valid solution. It is useless, for example, for locating a given value in an unordered table. When it is applicable, however, backtracking is often much faster than <a href=\"https://en.wikipedia.org/wiki/Brute_force_search\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>brute force enumeration</a> of all complete candidates, since it can eliminate a large number of candidates with a single test.</blockquote><a href=\"https://www.quora.com/What-algorithms-every-software-engineer-should-know/answer/Gabriel-Cojocaru\" target=\"_blank\">What algorithms every software engineer should know?</a>","reblog":{"comment":"<p>Answer on @Quora by Gabriel Cojocaru to What algorithms every software engineer should know?  1. Divide and Conquer - A divide and conquer algorithm works by recursively breaking down a problem into two or more sub-problems of the same (or related) type (divide), until these become simple enough to be solved directly (conquer). The solutions to the sub-problems are then combined to give a solution to the original problem.  This divide and conquer technique is the basis of efficient algorithms for all kinds of problems, such as   (e.g., QuickSort , Merge Sort ), multiplying large numbers (e.g. Karatsuba), syntactic analysis (e.g., top-down parsers), and computing the discrete Fourier transform (FFTs).  2. Dynamic Programming -  is a method for solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once, and storing their solutions - ideally, using a memory-based data structure. The next time the same subproblem occurs, instead of recomputing its solution, one simply looks up the previously computed solution, thereby saving computation time at the expense of a (hopefully) modest expenditure in storage space. (Each of the subproblem solutions is indexed in some way, typically based on the values of its input parameters, so as to facilitate its lookup.) The technique of storing solutions to subproblems instead of recomputing them is called “memoization”.  Dynamic programming algorithms are used for optimization (for example, finding the shortest path between two points, or the fastest way to multiply many matrices). A dynamic programming algorithm will examine the previously solved subproblems and will combine their solutions to give the best solution for the given problem. The alternatives are many, such as using a Greedy Algorithm, which picks the locally optimal choice at each branch in the road. The locally optimal choice may be a poor choice for the overall solution. While a greedy algorithm does not guarantee an optimal solution, it is often faster to calculate. Fortunately, some greedy algorithms (such as Minimum Spanning Tree ) are proven to lead to the optimal solution.  3. Graph Algorithms - Graphs can be used to model many types of relations and processes in physical, biological,social and information systems. Many practical problems can be represented by graphs.  In computer science, graphs are used to represent networks of communication, data organization, computational devices, the flow of computation, etc. For instance, the link structure of a website can be represented by a directed graph, in which the vertices represent web pages and directed edges represent links from one page to another. A similar approach can be taken to problems in travel, biology, computer chip design, and many other fields. The development of algorithms to handle graphs is therefore of major interest in computer science. The transformation of graphs is often formalized and represented by graph rewrite systems. Complementary to graph transformation systems focusing on rule-based in-memory manipulation of graphs are graph databases geared towards transaction-safe, persistent storing and querying of graph-structured data.  4. Greedy Algorithm - is an algorithm that follows the problem solving heuristic of making the locally optimal choice at each stage with the hope of finding a global optimum. In many problems, a greedy strategy does not in general produce an optimal solution, but nonetheless a greedy heuristic may yield locally optimal solutions that approximate a global optimal solution in a reasonable time.  For example, a greedy strategy for the Travelling Salesman Problem  (which is of a high computational complexity) is the following heuristic: “At each stage visit an unvisited city nearest to the current city”. This heuristic need not find a best solution, but terminates in a reasonable number of steps; finding an optimal solution typically requires unreasonably many steps. In mathematical optimization, greedy algorithms solve combinatorial problems having the properties of matroids.   5. Backtracking - is a general   wikipedia.org  algorithm for finding all (or some) solutions to some computational problems, notably constraint satisfaction problems, that incrementally builds candidates to the solutions, and abandons each partial candidate c (“backtracks”) as soon as it determines that c cannot possibly be completed to a valid solution.  The classic textbook example of the use of backtracking is the eight queens puzzle, that asks for all arrangements of eight chess queens on a standard chessboard so that no queen attacks any other. In the common backtracking approach, the partial candidates are arrangements of k queens in the first k rows of the board, all in different rows and columns. Any partial solution that contains two mutually attacking queens can be abandoned.  Backtracking can be applied only for problems which admit the concept of a “partial candidate solution” and a relatively quick test of whether it can possibly be completed to a valid solution. It is useless, for example, for locating a given value in an unordered table. When it is applicable, however, backtracking is often much faster than brute force enumeration of all complete candidates, since it can eliminate a large number of candidates with a single test.<br><br>Answer by Gabriel Cojocaru:<blockquote><b><a href=\"http://www.codingeek.org\" target=\"_blank\">www.codingeek.org</a> </b><br><br>1. <span class=\"qlink_container\"><a href=\"http://codingeek.org/category/algorithms/divide-and-conquer/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Divide and Conquer</b></a></span> - A divide and conquer <a href=\"https://en.wikipedia.org/wiki/Algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>algorithm</a> works by recursively breaking down a problem into two or more sub-problems of the same (or related) type (<b>divide</b>), until these become simple enough to be solved directly (<b>conquer</b>). The solutions to the sub-problems are then combined to give a solution to the original problem.<br><br>This divide and conquer technique is the basis of efficient algorithms for all kinds of problems, such as   (e.g., <a href=\"http://codingeek.org/algorithms/quicksort/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>QuickSort</a> , <a href=\"http://codingeek.org/algorithms/merge-sort/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>Merge Sort</a> ), <a href=\"https://en.wikipedia.org/wiki/Multiplication_algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>multiplying large numbers</a> (e.g. <a href=\"https://en.wikipedia.org/wiki/Karatsuba_algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>Karatsuba</a>), <a href=\"https://en.wikipedia.org/wiki/Syntactic_analysis\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>syntactic analysis</a> (e.g., <a href=\"https://en.wikipedia.org/wiki/Top-down_parser\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>top-down parsers</a>), and computing the <a href=\"https://en.wikipedia.org/wiki/Discrete_Fourier_transform\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>discrete Fourier transform</a> (<a href=\"https://en.wikipedia.org/wiki/Fast_Fourier_transform\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>FFTs</a>).<br><br>2. <a href=\"http://codingeek.org/category/algorithms/dynamic-programming/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Dynamic Programming</b></a> -  is a method for solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once, and storing their solutions - ideally, using a memory-based data structure. The next time the same subproblem occurs, instead of recomputing its solution, one simply looks up the previously computed solution, thereby saving computation time at the expense of a (hopefully) modest expenditure in storage space. (Each of the subproblem solutions is indexed in some way, typically based on the values of its input parameters, so as to facilitate its lookup.) The technique of storing solutions to subproblems instead of recomputing them is called “<a href=\"https://en.wikipedia.org/wiki/Memoization\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>memoization</a>”.<br><br>Dynamic programming algorithms are used for optimization (for example, finding the shortest path between two points, or the fastest way to multiply many matrices). A dynamic programming algorithm will examine the previously solved subproblems and will combine their solutions to give the best solution for the given problem. The alternatives are many, such as using a <a href=\"http://codingeek.org/category/algorithms/greedy-algorithms/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>Greedy Algorithm</a>, which picks the locally optimal choice at each branch in the road. The locally optimal choice may be a poor choice for the overall solution. While a greedy algorithm does not guarantee an optimal solution, it is often faster to calculate. Fortunately, some greedy algorithms (such as <a href=\"http://codingeek.org/algorithms/prims-minimum-spanning-tree-mst/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>Minimum Spanning Tree</a> ) are proven to lead to the optimal solution.<br><br>3.<b> </b><a href=\"http://codingeek.org/category/algorithms/graph-algorithms/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Graph Algorithms</b></a> - Graphs can be used to model many types of relations and processes in physical, biological,social and information systems. Many practical problems can be represented by graphs.<br><br>In <a href=\"https://en.wikipedia.org/wiki/Computer_science\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>computer science</a>, graphs are used to represent networks of communication, data organization, computational devices, the flow of computation, etc. For instance, the link structure of a <a href=\"https://en.wikipedia.org/wiki/Website\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>website</a> can be represented by a directed graph, in which the vertices represent web pages and directed edges represent <a href=\"https://en.wikipedia.org/wiki/Hyperlink\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>links</a> from one page to another. A similar approach can be taken to problems in travel, biology, computer chip design, and many other fields. The development of <a href=\"https://en.wikipedia.org/wiki/Algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>algorithms</a> to handle graphs is therefore of major interest in computer science. The <a href=\"https://en.wikipedia.org/wiki/Graph_transformation\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>transformation of graphs</a> is often formalized and represented by <a href=\"https://en.wikipedia.org/wiki/Graph_rewriting\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>graph rewrite systems</a>. Complementary to <a href=\"https://en.wikipedia.org/wiki/Graph_transformation\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>graph transformation</a> systems focusing on rule-based in-memory manipulation of graphs are <a href=\"https://en.wikipedia.org/wiki/Graph_database\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>graph databases</a> geared towards <a href=\"https://en.wikipedia.org/wiki/Database_transaction\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>transaction</a>-safe, <a href=\"https://en.wikipedia.org/wiki/Persistence_(computer_science)\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>persistent</a> storing and querying of <a href=\"https://en.wikipedia.org/wiki/Graph_(data_structure)\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>graph-structured data</a>.<br><br>4. <a href=\"http://codingeek.org/category/algorithms/greedy-algorithms/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Greedy Algorithm</b></a> - is an <a href=\"https://en.wikipedia.org/wiki/Algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>algorithm</a> that follows the <a href=\"https://en.wikipedia.org/wiki/Problem_solving\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>problem solving</a> <a href=\"https://en.wikipedia.org/wiki/Heuristic_(computer_science)\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>heuristic</a> of making the locally optimal choice at each stage with the hope of finding a global optimum. In many problems, a greedy strategy does not in general produce an optimal solution, but nonetheless a greedy heuristic may yield locally optimal solutions that approximate a global optimal solution in a reasonable time.<br><br>For example, a greedy strategy for the <a href=\"http://codingeek.org/algorithms/travelling-salesman-problem/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>Travelling Salesman Problem</a>  (which is of a high computational complexity) is the following heuristic: “At each stage visit an unvisited city nearest to the current city”. This heuristic need not find a best solution, but terminates in a reasonable number of steps; finding an optimal solution typically requires unreasonably many steps. In <a href=\"https://en.wikipedia.org/wiki/Mathematical_optimization\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>mathematical optimization</a>, greedy algorithms solve <a href=\"https://en.wikipedia.org/wiki/Combinatorial_optimization\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>combinatorial problems</a> having the properties of <a href=\"https://en.wikipedia.org/wiki/Matroid\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>matroids</a>.<br><br><br>5. <a href=\"http://codingeek.org/category/algorithms/backtracking/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Backtracking</b></a> - is a general <a href=\"https://en.wikipedia.org/wiki/Algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>algorithm</a> for finding all (or some) solutions to some <a href=\"https://en.wikipedia.org/wiki/Computational_problem\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>computational problems</a>, notably <a href=\"https://en.wikipedia.org/wiki/Constraint_satisfaction_problem\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>constraint satisfaction problems</a>, that incrementally builds candidates to the solutions, and abandons each partial candidate <i>c</i> (“backtracks”) as soon as it determines that <i>c</i> cannot possibly be completed to a valid solution.<br><br>The classic textbook example of the use of backtracking is the <a href=\"https://en.wikipedia.org/wiki/Eight_queens_puzzle\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>eight queens puzzle</a>, that asks for all arrangements of eight <a href=\"https://en.wikipedia.org/wiki/Chess\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>chess</a> <a href=\"https://en.wikipedia.org/wiki/Queen_(chess)\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>queens</a> on a standard <a href=\"https://en.wikipedia.org/wiki/Chessboard\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>chessboard</a> so that no queen attacks any other. In the common backtracking approach, the partial candidates are arrangements of <i>k </i>queens in the first <i>k</i> rows of the board, all in different rows and columns. Any partial solution that contains two mutually attacking queens can be abandoned.<br><br>Backtracking can be applied only for problems which admit the concept of a “partial candidate solution” and a relatively quick test of whether it can possibly be completed to a valid solution. It is useless, for example, for locating a given value in an unordered table. When it is applicable, however, backtracking is often much faster than <a href=\"https://en.wikipedia.org/wiki/Brute_force_search\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>brute force enumeration</a> of all complete candidates, since it can eliminate a large number of candidates with a single test.</blockquote><a href=\"https://www.quora.com/What-algorithms-every-software-engineer-should-know/answer/Gabriel-Cojocaru\" target=\"_blank\">What algorithms every software engineer should know?</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"141894778501"},"content_raw":"<p>Answer on @Quora by Gabriel Cojocaru to What algorithms every software engineer should know?  1. Divide and Conquer - A divide and conquer algorithm works by recursively breaking down a problem into two or more sub-problems of the same (or related) type (divide), until these become simple enough to be solved directly (conquer). The solutions to the sub-problems are then combined to give a solution to the original problem.  This divide and conquer technique is the basis of efficient algorithms for all kinds of problems, such as   (e.g., QuickSort , Merge Sort ), multiplying large numbers (e.g. Karatsuba), syntactic analysis (e.g., top-down parsers), and computing the discrete Fourier transform (FFTs).  2. Dynamic Programming -  is a method for solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once, and storing their solutions - ideally, using a memory-based data structure. The next time the same subproblem occurs, instead of recomputing its solution, one simply looks up the previously computed solution, thereby saving computation time at the expense of a (hopefully) modest expenditure in storage space. (Each of the subproblem solutions is indexed in some way, typically based on the values of its input parameters, so as to facilitate its lookup.) The technique of storing solutions to subproblems instead of recomputing them is called “memoization”.  Dynamic programming algorithms are used for optimization (for example, finding the shortest path between two points, or the fastest way to multiply many matrices). A dynamic programming algorithm will examine the previously solved subproblems and will combine their solutions to give the best solution for the given problem. The alternatives are many, such as using a Greedy Algorithm, which picks the locally optimal choice at each branch in the road. The locally optimal choice may be a poor choice for the overall solution. While a greedy algorithm does not guarantee an optimal solution, it is often faster to calculate. Fortunately, some greedy algorithms (such as Minimum Spanning Tree ) are proven to lead to the optimal solution.  3. Graph Algorithms - Graphs can be used to model many types of relations and processes in physical, biological,social and information systems. Many practical problems can be represented by graphs.  In computer science, graphs are used to represent networks of communication, data organization, computational devices, the flow of computation, etc. For instance, the link structure of a website can be represented by a directed graph, in which the vertices represent web pages and directed edges represent links from one page to another. A similar approach can be taken to problems in travel, biology, computer chip design, and many other fields. The development of algorithms to handle graphs is therefore of major interest in computer science. The transformation of graphs is often formalized and represented by graph rewrite systems. Complementary to graph transformation systems focusing on rule-based in-memory manipulation of graphs are graph databases geared towards transaction-safe, persistent storing and querying of graph-structured data.  4. Greedy Algorithm - is an algorithm that follows the problem solving heuristic of making the locally optimal choice at each stage with the hope of finding a global optimum. In many problems, a greedy strategy does not in general produce an optimal solution, but nonetheless a greedy heuristic may yield locally optimal solutions that approximate a global optimal solution in a reasonable time.  For example, a greedy strategy for the Travelling Salesman Problem  (which is of a high computational complexity) is the following heuristic: “At each stage visit an unvisited city nearest to the current city”. This heuristic need not find a best solution, but terminates in a reasonable number of steps; finding an optimal solution typically requires unreasonably many steps. In mathematical optimization, greedy algorithms solve combinatorial problems having the properties of matroids.   5. Backtracking - is a general   wikipedia.org  algorithm for finding all (or some) solutions to some computational problems, notably constraint satisfaction problems, that incrementally builds candidates to the solutions, and abandons each partial candidate c (“backtracks”) as soon as it determines that c cannot possibly be completed to a valid solution.  The classic textbook example of the use of backtracking is the eight queens puzzle, that asks for all arrangements of eight chess queens on a standard chessboard so that no queen attacks any other. In the common backtracking approach, the partial candidates are arrangements of k queens in the first k rows of the board, all in different rows and columns. Any partial solution that contains two mutually attacking queens can be abandoned.  Backtracking can be applied only for problems which admit the concept of a “partial candidate solution” and a relatively quick test of whether it can possibly be completed to a valid solution. It is useless, for example, for locating a given value in an unordered table. When it is applicable, however, backtracking is often much faster than brute force enumeration of all complete candidates, since it can eliminate a large number of candidates with a single test.<br><br>Answer by Gabriel Cojocaru:<blockquote><b><a href=\"http://www.codingeek.org\" target=\"_blank\">www.codingeek.org</a> </b><br><br>1. <span class=\"qlink_container\"><a href=\"http://codingeek.org/category/algorithms/divide-and-conquer/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Divide and Conquer</b></a></span> - A divide and conquer <a href=\"https://en.wikipedia.org/wiki/Algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>algorithm</a> works by recursively breaking down a problem into two or more sub-problems of the same (or related) type (<b>divide</b>), until these become simple enough to be solved directly (<b>conquer</b>). The solutions to the sub-problems are then combined to give a solution to the original problem.<br><br>This divide and conquer technique is the basis of efficient algorithms for all kinds of problems, such as   (e.g., <a href=\"http://codingeek.org/algorithms/quicksort/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>QuickSort</a> , <a href=\"http://codingeek.org/algorithms/merge-sort/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>Merge Sort</a> ), <a href=\"https://en.wikipedia.org/wiki/Multiplication_algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>multiplying large numbers</a> (e.g. <a href=\"https://en.wikipedia.org/wiki/Karatsuba_algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>Karatsuba</a>), <a href=\"https://en.wikipedia.org/wiki/Syntactic_analysis\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>syntactic analysis</a> (e.g., <a href=\"https://en.wikipedia.org/wiki/Top-down_parser\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>top-down parsers</a>), and computing the <a href=\"https://en.wikipedia.org/wiki/Discrete_Fourier_transform\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>discrete Fourier transform</a> (<a href=\"https://en.wikipedia.org/wiki/Fast_Fourier_transform\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>FFTs</a>).<br><br>2. <a href=\"http://codingeek.org/category/algorithms/dynamic-programming/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Dynamic Programming</b></a> -  is a method for solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once, and storing their solutions - ideally, using a memory-based data structure. The next time the same subproblem occurs, instead of recomputing its solution, one simply looks up the previously computed solution, thereby saving computation time at the expense of a (hopefully) modest expenditure in storage space. (Each of the subproblem solutions is indexed in some way, typically based on the values of its input parameters, so as to facilitate its lookup.) The technique of storing solutions to subproblems instead of recomputing them is called “<a href=\"https://en.wikipedia.org/wiki/Memoization\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>memoization</a>”.<br><br>Dynamic programming algorithms are used for optimization (for example, finding the shortest path between two points, or the fastest way to multiply many matrices). A dynamic programming algorithm will examine the previously solved subproblems and will combine their solutions to give the best solution for the given problem. The alternatives are many, such as using a <a href=\"http://codingeek.org/category/algorithms/greedy-algorithms/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>Greedy Algorithm</a>, which picks the locally optimal choice at each branch in the road. The locally optimal choice may be a poor choice for the overall solution. While a greedy algorithm does not guarantee an optimal solution, it is often faster to calculate. Fortunately, some greedy algorithms (such as <a href=\"http://codingeek.org/algorithms/prims-minimum-spanning-tree-mst/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>Minimum Spanning Tree</a> ) are proven to lead to the optimal solution.<br><br>3.<b> </b><a href=\"http://codingeek.org/category/algorithms/graph-algorithms/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Graph Algorithms</b></a> - Graphs can be used to model many types of relations and processes in physical, biological,social and information systems. Many practical problems can be represented by graphs.<br><br>In <a href=\"https://en.wikipedia.org/wiki/Computer_science\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>computer science</a>, graphs are used to represent networks of communication, data organization, computational devices, the flow of computation, etc. For instance, the link structure of a <a href=\"https://en.wikipedia.org/wiki/Website\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>website</a> can be represented by a directed graph, in which the vertices represent web pages and directed edges represent <a href=\"https://en.wikipedia.org/wiki/Hyperlink\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>links</a> from one page to another. A similar approach can be taken to problems in travel, biology, computer chip design, and many other fields. The development of <a href=\"https://en.wikipedia.org/wiki/Algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>algorithms</a> to handle graphs is therefore of major interest in computer science. The <a href=\"https://en.wikipedia.org/wiki/Graph_transformation\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>transformation of graphs</a> is often formalized and represented by <a href=\"https://en.wikipedia.org/wiki/Graph_rewriting\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>graph rewrite systems</a>. Complementary to <a href=\"https://en.wikipedia.org/wiki/Graph_transformation\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>graph transformation</a> systems focusing on rule-based in-memory manipulation of graphs are <a href=\"https://en.wikipedia.org/wiki/Graph_database\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>graph databases</a> geared towards <a href=\"https://en.wikipedia.org/wiki/Database_transaction\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>transaction</a>-safe, <a href=\"https://en.wikipedia.org/wiki/Persistence_(computer_science)\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>persistent</a> storing and querying of <a href=\"https://en.wikipedia.org/wiki/Graph_(data_structure)\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>graph-structured data</a>.<br><br>4. <a href=\"http://codingeek.org/category/algorithms/greedy-algorithms/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Greedy Algorithm</b></a> - is an <a href=\"https://en.wikipedia.org/wiki/Algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>algorithm</a> that follows the <a href=\"https://en.wikipedia.org/wiki/Problem_solving\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>problem solving</a> <a href=\"https://en.wikipedia.org/wiki/Heuristic_(computer_science)\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>heuristic</a> of making the locally optimal choice at each stage with the hope of finding a global optimum. In many problems, a greedy strategy does not in general produce an optimal solution, but nonetheless a greedy heuristic may yield locally optimal solutions that approximate a global optimal solution in a reasonable time.<br><br>For example, a greedy strategy for the <a href=\"http://codingeek.org/algorithms/travelling-salesman-problem/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'>Travelling Salesman Problem</a>  (which is of a high computational complexity) is the following heuristic: “At each stage visit an unvisited city nearest to the current city”. This heuristic need not find a best solution, but terminates in a reasonable number of steps; finding an optimal solution typically requires unreasonably many steps. In <a href=\"https://en.wikipedia.org/wiki/Mathematical_optimization\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>mathematical optimization</a>, greedy algorithms solve <a href=\"https://en.wikipedia.org/wiki/Combinatorial_optimization\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>combinatorial problems</a> having the properties of <a href=\"https://en.wikipedia.org/wiki/Matroid\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>matroids</a>.<br><br><br>5. <a href=\"http://codingeek.org/category/algorithms/backtracking/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"codingeek.org\")'><b>Backtracking</b></a> - is a general <a href=\"https://en.wikipedia.org/wiki/Algorithm\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>algorithm</a> for finding all (or some) solutions to some <a href=\"https://en.wikipedia.org/wiki/Computational_problem\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>computational problems</a>, notably <a href=\"https://en.wikipedia.org/wiki/Constraint_satisfaction_problem\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>constraint satisfaction problems</a>, that incrementally builds candidates to the solutions, and abandons each partial candidate <i>c</i> (“backtracks”) as soon as it determines that <i>c</i> cannot possibly be completed to a valid solution.<br><br>The classic textbook example of the use of backtracking is the <a href=\"https://en.wikipedia.org/wiki/Eight_queens_puzzle\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>eight queens puzzle</a>, that asks for all arrangements of eight <a href=\"https://en.wikipedia.org/wiki/Chess\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>chess</a> <a href=\"https://en.wikipedia.org/wiki/Queen_(chess)\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>queens</a> on a standard <a href=\"https://en.wikipedia.org/wiki/Chessboard\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>chessboard</a> so that no queen attacks any other. In the common backtracking approach, the partial candidates are arrangements of <i>k </i>queens in the first <i>k</i> rows of the board, all in different rows and columns. Any partial solution that contains two mutually attacking queens can be abandoned.<br><br>Backtracking can be applied only for problems which admit the concept of a “partial candidate solution” and a relatively quick test of whether it can possibly be completed to a valid solution. It is useless, for example, for locating a given value in an unordered table. When it is applicable, however, backtracking is often much faster than <a href=\"https://en.wikipedia.org/wiki/Brute_force_search\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"wikipedia.org\")'>brute force enumeration</a> of all complete candidates, since it can eliminate a large number of candidates with a single test.</blockquote><a href=\"https://www.quora.com/What-algorithms-every-software-engineer-should-know/answer/Gabriel-Cojocaru\" target=\"_blank\">What algorithms every software engineer should know?</a></p>","content":"<p><p>Answer on @Quora by Gabriel Cojocaru to What algorithms every software engineer should know?&nbsp; 1. Divide and Conquer - A divide and conquer algorithm works by recursively breaking down a problem into two or more sub-problems of the same (or related) type (divide), until these become simple enough to be solved directly (conquer). The solutions to the sub-problems are then combined to give a solution to the original problem.&nbsp; This divide and conquer technique is the basis of efficient algorithms for all kinds of problems, such as&nbsp;&nbsp; (e.g., QuickSort , Merge Sort ), multiplying large numbers (e.g. Karatsuba), syntactic analysis (e.g., top-down parsers), and computing the discrete Fourier transform (FFTs).&nbsp; 2. Dynamic Programming -&nbsp; is a method for solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once, and storing their solutions - ideally, using a memory-based data structure. The next time the same subproblem occurs, instead of recomputing its solution, one simply looks up the previously computed solution, thereby saving computation time at the expense of a (hopefully) modest expenditure in storage space. (Each of the subproblem solutions is indexed in some way, typically based on the values of its input parameters, so as to facilitate its lookup.) The technique of storing solutions to subproblems instead of recomputing them is called &ldquo;memoization&rdquo;.&nbsp; Dynamic programming algorithms are used for optimization (for example, finding the shortest path between two points, or the fastest way to multiply many matrices). A dynamic programming algorithm will examine the previously solved subproblems and will combine their solutions to give the best solution for the given problem. The alternatives are many, such as using a Greedy Algorithm, which picks the locally optimal choice at each branch in the road. The locally optimal choice may be a poor choice for the overall solution. While a greedy algorithm does not guarantee an optimal solution, it is often faster to calculate. Fortunately, some greedy algorithms (such as Minimum Spanning Tree ) are proven to lead to the optimal solution.&nbsp; 3. Graph Algorithms - Graphs can be used to model many types of relations and processes in physical, biological,social and information systems. Many practical problems can be represented by graphs.&nbsp; In computer science, graphs are used to represent networks of communication, data organization, computational devices, the flow of computation, etc. For instance, the link structure of a website can be represented by a directed graph, in which the vertices represent web pages and directed edges represent links from one page to another. A similar approach can be taken to problems in travel, biology, computer chip design, and many other fields. The development of algorithms to handle graphs is therefore of major interest in computer science. The transformation of graphs is often formalized and represented by graph rewrite systems. Complementary to graph transformation systems focusing on rule-based in-memory manipulation of graphs are graph databases geared towards transaction-safe, persistent storing and querying of graph-structured data.&nbsp; 4. Greedy Algorithm - is an algorithm that follows the problem solving heuristic of making the locally optimal choice at each stage with the hope of finding a global optimum. In many problems, a greedy strategy does not in general produce an optimal solution, but nonetheless a greedy heuristic may yield locally optimal solutions that approximate a global optimal solution in a reasonable time.&nbsp; For example, a greedy strategy for the Travelling Salesman Problem&nbsp; (which is of a high computational complexity) is the following heuristic: &ldquo;At each stage visit an unvisited city nearest to the current city&rdquo;. This heuristic need not find a best solution, but terminates in a reasonable number of steps; finding an optimal solution typically requires unreasonably many steps. In mathematical optimization, greedy algorithms solve combinatorial problems having the properties of matroids.&nbsp;&nbsp; 5. Backtracking - is a general&nbsp;&nbsp; wikipedia.org&nbsp; algorithm for finding all (or some) solutions to some computational problems, notably constraint satisfaction problems, that incrementally builds candidates to the solutions, and abandons each partial candidate c (&ldquo;backtracks&rdquo;) as soon as it determines that c cannot possibly be completed to a valid solution.&nbsp; The classic textbook example of the use of backtracking is the eight queens puzzle, that asks for all arrangements of eight chess queens on a standard chessboard so that no queen attacks any other. In the common backtracking approach, the partial candidates are arrangements of k queens in the first k rows of the board, all in different rows and columns. Any partial solution that contains two mutually attacking queens can be abandoned.&nbsp; Backtracking can be applied only for problems which admit the concept of a &ldquo;partial candidate solution&rdquo; and a relatively quick test of whether it can possibly be completed to a valid solution. It is useless, for example, for locating a given value in an unordered table. When it is applicable, however, backtracking is often much faster than brute force enumeration of all complete candidates, since it can eliminate a large number of candidates with a single test.<br /><br />Answer by Gabriel Cojocaru:</p><blockquote><p><b><a href=\"http://www.codingeek.org\" target=\"_blank\">www.codingeek.org</a> </b><br /><br />1. <a href=\"http://codingeek.org/category/algorithms/divide-and-conquer/\" target=\"_blank\"><b>Divide and Conquer</b></a> - A divide and conquer <a href=\"https://en.wikipedia.org/wiki/Algorithm\" target=\"_blank\">algorithm</a> works by recursively breaking down a problem into two or more sub-problems of the same (or related) type (<b>divide</b>), until these become simple enough to be solved directly (<b>conquer</b>). The solutions to the sub-problems are then combined to give a solution to the original problem.<br /><br />This divide and conquer technique is the basis of efficient algorithms for all kinds of problems, such as&nbsp;&nbsp; (e.g., <a href=\"http://codingeek.org/algorithms/quicksort/\" target=\"_blank\">QuickSort</a> , <a href=\"http://codingeek.org/algorithms/merge-sort/\" target=\"_blank\">Merge Sort</a> ), <a href=\"https://en.wikipedia.org/wiki/Multiplication_algorithm\" target=\"_blank\">multiplying large numbers</a> (e.g. <a href=\"https://en.wikipedia.org/wiki/Karatsuba_algorithm\" target=\"_blank\">Karatsuba</a>), <a href=\"https://en.wikipedia.org/wiki/Syntactic_analysis\" target=\"_blank\">syntactic analysis</a> (e.g., <a href=\"https://en.wikipedia.org/wiki/Top-down_parser\" target=\"_blank\">top-down parsers</a>), and computing the <a href=\"https://en.wikipedia.org/wiki/Discrete_Fourier_transform\" target=\"_blank\">discrete Fourier transform</a> (<a href=\"https://en.wikipedia.org/wiki/Fast_Fourier_transform\" target=\"_blank\">FFTs</a>).<br /><br />2. <a href=\"http://codingeek.org/category/algorithms/dynamic-programming/\" target=\"_blank\"><b>Dynamic Programming</b></a> -&nbsp; is a method for solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once, and storing their solutions - ideally, using a memory-based data structure. The next time the same subproblem occurs, instead of recomputing its solution, one simply looks up the previously computed solution, thereby saving computation time at the expense of a (hopefully) modest expenditure in storage space. (Each of the subproblem solutions is indexed in some way, typically based on the values of its input parameters, so as to facilitate its lookup.) The technique of storing solutions to subproblems instead of recomputing them is called &ldquo;<a href=\"https://en.wikipedia.org/wiki/Memoization\" target=\"_blank\">memoization</a>&rdquo;.<br /><br />Dynamic programming algorithms are used for optimization (for example, finding the shortest path between two points, or the fastest way to multiply many matrices). A dynamic programming algorithm will examine the previously solved subproblems and will combine their solutions to give the best solution for the given problem. The alternatives are many, such as using a <a href=\"http://codingeek.org/category/algorithms/greedy-algorithms/\" target=\"_blank\">Greedy Algorithm</a>, which picks the locally optimal choice at each branch in the road. The locally optimal choice may be a poor choice for the overall solution. While a greedy algorithm does not guarantee an optimal solution, it is often faster to calculate. Fortunately, some greedy algorithms (such as <a href=\"http://codingeek.org/algorithms/prims-minimum-spanning-tree-mst/\" target=\"_blank\">Minimum Spanning Tree</a> ) are proven to lead to the optimal solution.<br /><br />3.<b> </b><a href=\"http://codingeek.org/category/algorithms/graph-algorithms/\" target=\"_blank\"><b>Graph Algorithms</b></a> - Graphs can be used to model many types of relations and processes in physical, biological,social and information systems. Many practical problems can be represented by graphs.<br /><br />In <a href=\"https://en.wikipedia.org/wiki/Computer_science\" target=\"_blank\">computer science</a>, graphs are used to represent networks of communication, data organization, computational devices, the flow of computation, etc. For instance, the link structure of a <a href=\"https://en.wikipedia.org/wiki/Website\" target=\"_blank\">website</a> can be represented by a directed graph, in which the vertices represent web pages and directed edges represent <a href=\"https://en.wikipedia.org/wiki/Hyperlink\" target=\"_blank\">links</a> from one page to another. A similar approach can be taken to problems in travel, biology, computer chip design, and many other fields. The development of <a href=\"https://en.wikipedia.org/wiki/Algorithm\" target=\"_blank\">algorithms</a> to handle graphs is therefore of major interest in computer science. The <a href=\"https://en.wikipedia.org/wiki/Graph_transformation\" target=\"_blank\">transformation of graphs</a> is often formalized and represented by <a href=\"https://en.wikipedia.org/wiki/Graph_rewriting\" target=\"_blank\">graph rewrite systems</a>. Complementary to <a href=\"https://en.wikipedia.org/wiki/Graph_transformation\" target=\"_blank\">graph transformation</a> systems focusing on rule-based in-memory manipulation of graphs are <a href=\"https://en.wikipedia.org/wiki/Graph_database\" target=\"_blank\">graph databases</a> geared towards <a href=\"https://en.wikipedia.org/wiki/Database_transaction\" target=\"_blank\">transaction</a>-safe, <a href=\"https://en.wikipedia.org/wiki/Persistence_(computer_science)\" target=\"_blank\">persistent</a> storing and querying of <a href=\"https://en.wikipedia.org/wiki/Graph_(data_structure)\" target=\"_blank\">graph-structured data</a>.<br /><br />4. <a href=\"http://codingeek.org/category/algorithms/greedy-algorithms/\" target=\"_blank\"><b>Greedy Algorithm</b></a> - is an <a href=\"https://en.wikipedia.org/wiki/Algorithm\" target=\"_blank\">algorithm</a> that follows the <a href=\"https://en.wikipedia.org/wiki/Problem_solving\" target=\"_blank\">problem solving</a> <a href=\"https://en.wikipedia.org/wiki/Heuristic_(computer_science)\" target=\"_blank\">heuristic</a> of making the locally optimal choice at each stage with the hope of finding a global optimum. In many problems, a greedy strategy does not in general produce an optimal solution, but nonetheless a greedy heuristic may yield locally optimal solutions that approximate a global optimal solution in a reasonable time.<br /><br />For example, a greedy strategy for the <a href=\"http://codingeek.org/algorithms/travelling-salesman-problem/\" target=\"_blank\">Travelling Salesman Problem</a>&nbsp; (which is of a high computational complexity) is the following heuristic: &ldquo;At each stage visit an unvisited city nearest to the current city&rdquo;. This heuristic need not find a best solution, but terminates in a reasonable number of steps; finding an optimal solution typically requires unreasonably many steps. In <a href=\"https://en.wikipedia.org/wiki/Mathematical_optimization\" target=\"_blank\">mathematical optimization</a>, greedy algorithms solve <a href=\"https://en.wikipedia.org/wiki/Combinatorial_optimization\" target=\"_blank\">combinatorial problems</a> having the properties of <a href=\"https://en.wikipedia.org/wiki/Matroid\" target=\"_blank\">matroids</a>.<br /><br /><br />5. <a href=\"http://codingeek.org/category/algorithms/backtracking/\" target=\"_blank\"><b>Backtracking</b></a> - is a general <a href=\"https://en.wikipedia.org/wiki/Algorithm\" target=\"_blank\">algorithm</a> for finding all (or some) solutions to some <a href=\"https://en.wikipedia.org/wiki/Computational_problem\" target=\"_blank\">computational problems</a>, notably <a href=\"https://en.wikipedia.org/wiki/Constraint_satisfaction_problem\" target=\"_blank\">constraint satisfaction problems</a>, that incrementally builds candidates to the solutions, and abandons each partial candidate <i>c</i> (&ldquo;backtracks&rdquo;) as soon as it determines that <i>c</i> cannot possibly be completed to a valid solution.<br /><br />The classic textbook example of the use of backtracking is the <a href=\"https://en.wikipedia.org/wiki/Eight_queens_puzzle\" target=\"_blank\">eight queens puzzle</a>, that asks for all arrangements of eight <a href=\"https://en.wikipedia.org/wiki/Chess\" target=\"_blank\">chess</a> <a href=\"https://en.wikipedia.org/wiki/Queen_(chess)\" target=\"_blank\">queens</a> on a standard <a href=\"https://en.wikipedia.org/wiki/Chessboard\" target=\"_blank\">chessboard</a> so that no queen attacks any other. In the common backtracking approach, the partial candidates are arrangements of <i>k </i>queens in the first <i>k</i> rows of the board, all in different rows and columns. Any partial solution that contains two mutually attacking queens can be abandoned.<br /><br />Backtracking can be applied only for problems which admit the concept of a &ldquo;partial candidate solution&rdquo; and a relatively quick test of whether it can possibly be completed to a valid solution. It is useless, for example, for locating a given value in an unordered table. When it is applicable, however, backtracking is often much faster than <a href=\"https://en.wikipedia.org/wiki/Brute_force_search\" target=\"_blank\">brute force enumeration</a> of all complete candidates, since it can eliminate a large number of candidates with a single test.</p></blockquote><a href=\"https://www.quora.com/What-algorithms-every-software-engineer-should-know/answer/Gabriel-Cojocaru\" target=\"_blank\">What algorithms every software engineer should know?</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"tyb","blog":{"name":"tyb","title":"tyb","description":"<span class=\"quora-follow-button\" data-name=\"Taha-Yavuz-Bodur\">Follow <a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">Taha Yavuz Bodur</a> on <a href=\"http://www.quora.com\">Quora</a> </span>\n<br />\n<a href=\"http://www.quora.com/Taha-Yavuz-Bodur\">My Quora!<a/>\n<br />\n*\n<br />\n\n*\nHere you can see the <a href=\"/tagged/best\">BEST</a> and <a href=\"/tagged/important\">IMPORTANT</a> stuff in this blog. \n\n************\n\nYou may\n- <a href=\"http://tyb.tumblr.com/ask\">Ask</a>\n- <a href=\"http://tyb.tumblr.com/submit\">Submit</a>\n- Comment\n\naccess my other stuff:\n- <a href=\"http://tyb.tumblr.com/tybarts\">Wordpress</a>\n- Github\n- Stackoverflow\n\n- <a href=\"http://tyb.tumblr.com/links\"><i>Links & People & Subjects</i></a> is a database of my interests. It will be updated and accumulated weekly. \n\n**************","url":"https://tyb.tumblr.com/","uuid":"t:G_JUkiZm7eK7CDZgaodxCw","updated":1559996560},"id":141894707516,"post_url":"https://tyb.tumblr.com/post/141894707516/how-can-i-learn-to-think-like-a-functional","slug":"how-can-i-learn-to-think-like-a-functional","date":"2016-03-29 12:14:45 GMT","timestamp":1459253685,"state":"published","format":"html","reblog_key":"KnCJqX87","tags":[],"short_url":"https://tmblr.co/ZNF0Fy249bMay","summary":"How can I learn to think like a functional programmer?","should_open_in_legacy":false,"recommended_source":null,"recommended_color":null,"note_count":0,"title":"How can I learn to think like a functional programmer?","body":"Answer on @Quora by @m00nlight223 to How can I learn to think like a functional programmer?  To me,  one key experience to change from imperative style to functional style is to abstract the operation to handle the data-structure, and use high-order function like map or fold/reduce to handle the data-structure like the following example   1(defn add-to-trie [trie x] 2  (assoc-in trie x (merge (get-in trie x) {:val x :terminal true}))) 3  4(defn build-trie [coll trie] 5  &ldquo;Build a trie over the values in the specified seq coll.&rdquo; 6  (reduce add-to-trie trie coll))    The above Clojure code use an collection to store some words and use reduce  to build a trie. This is perfectly functional style without state change of variable.   You may also read some good books on functional programming(I highl recommend SICP which also has free edition online and teaching videos). Or you can do some challenge programming in one functional language, for this 4clojure - Welcome! is a perfect place for clojure programmer, it require you to implement some programming tasks(such as group-by  in the core-language of Clojure), after you finish more and more of the exercise, I think you will be better and better in programming in thinking in a functional style.<br/><br/>Answer by Yushi Wang:<blockquote>When I first learn functional programming, it seems weird to program without variables and the operation to update variables. But in fact, 90% of the time, you can use functional style to programming without the change of state, and at most time, it is much better in the functional style.<br/><br/>But when you program in functional language more and more, it will show that it is more nature to program in this style(with high-order functions like map, filter, foldl, foldr etc.). <br/><br/>To me,  one key experience to change from imperative style to functional style is to abstract the operation to handle the data-structure, and use high-order function like map or fold/reduce to handle the data-structure like the following example<br/><br/><br/><pre class=\"prettyprint linenums\">(defn add-to-trie [trie x]\n  (assoc-in trie x (merge (get-in trie x) {:val x :terminal true})))\n\n(defn build-trie [coll trie]\n  \"Build a trie over the values in the specified seq coll.\"\n  (reduce add-to-trie trie coll))\n</pre><br/><br/>The above <span class=\"qlink_container\"><a href=\"http://www.clojure.com/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"clojure.com\")'>Clojure</a></span> code use an collection to store some words and use <pre class=\"prettyprint inline\">reduce</pre> to build a trie. This is perfectly functional style without state change of variable. <br/><br/>You may also read some good books on functional programming(I highl recommend <a href=\"http://mitpress.mit.edu/sicp/\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"mit.edu\")'>SICP</a> which also has free edition online and teaching videos). Or you can do some challenge programming in one functional language, for this <a href=\"http://www.4clojure.com/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"4clojure.com\")'>4clojure - Welcome!</a> is a perfect place for clojure programmer, it require you to implement some programming tasks(such as <pre class=\"prettyprint inline\">group-by</pre> in the core-language of Clojure), after you finish more and more of the exercise, I think you will be better and better in programming in thinking in a functional style.</blockquote><a href=\"https://www.quora.com/How-can-I-learn-to-think-like-a-functional-programmer/answer/Yushi-Wang-1\" target=\"_blank\">How can I learn to think like a functional programmer?</a>","reblog":{"comment":"<p>Answer on @Quora by @m00nlight223 to How can I learn to think like a functional programmer?  To me,  one key experience to change from imperative style to functional style is to abstract the operation to handle the data-structure, and use high-order function like map or fold/reduce to handle the data-structure like the following example   1(defn add-to-trie [trie x] 2  (assoc-in trie x (merge (get-in trie x) {:val x :terminal true}))) 3  4(defn build-trie [coll trie] 5  “Build a trie over the values in the specified seq coll.” 6  (reduce add-to-trie trie coll))    The above Clojure code use an collection to store some words and use reduce  to build a trie. This is perfectly functional style without state change of variable.   You may also read some good books on functional programming(I highl recommend SICP which also has free edition online and teaching videos). Or you can do some challenge programming in one functional language, for this 4clojure - Welcome! is a perfect place for clojure programmer, it require you to implement some programming tasks(such as group-by  in the core-language of Clojure), after you finish more and more of the exercise, I think you will be better and better in programming in thinking in a functional style.<br><br>Answer by Yushi Wang:<blockquote>When I first learn functional programming, it seems weird to program without variables and the operation to update variables. But in fact, 90% of the time, you can use functional style to programming without the change of state, and at most time, it is much better in the functional style.<br><br>But when you program in functional language more and more, it will show that it is more nature to program in this style(with high-order functions like map, filter, foldl, foldr etc.). <br><br>To me,  one key experience to change from imperative style to functional style is to abstract the operation to handle the data-structure, and use high-order function like map or fold/reduce to handle the data-structure like the following example<br><br><br><pre class=\"prettyprint linenums\">(defn add-to-trie [trie x]\n  (assoc-in trie x (merge (get-in trie x) {:val x :terminal true})))\n\n(defn build-trie [coll trie]\n  \"Build a trie over the values in the specified seq coll.\"\n  (reduce add-to-trie trie coll))\n</pre><br><br>The above <span class=\"qlink_container\"><a href=\"http://www.clojure.com/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"clojure.com\")'>Clojure</a></span> code use an collection to store some words and use <pre class=\"prettyprint inline\">reduce</pre> to build a trie. This is perfectly functional style without state change of variable. <br><br>You may also read some good books on functional programming(I highl recommend <a href=\"http://mitpress.mit.edu/sicp/\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"mit.edu\")'>SICP</a> which also has free edition online and teaching videos). Or you can do some challenge programming in one functional language, for this <a href=\"http://www.4clojure.com/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"4clojure.com\")'>4clojure - Welcome!</a> is a perfect place for clojure programmer, it require you to implement some programming tasks(such as <pre class=\"prettyprint inline\">group-by</pre> in the core-language of Clojure), after you finish more and more of the exercise, I think you will be better and better in programming in thinking in a functional style.</blockquote><a href=\"https://www.quora.com/How-can-I-learn-to-think-like-a-functional-programmer/answer/Yushi-Wang-1\" target=\"_blank\">How can I learn to think like a functional programmer?</a></p>","tree_html":""},"trail":[{"blog":{"name":"tyb","active":true,"theme":{"avatar_shape":"circle","background_color":"#F6F6F6","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Helvetica Neue","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"141894707516"},"content_raw":"<p>Answer on @Quora by @m00nlight223 to How can I learn to think like a functional programmer?  To me,  one key experience to change from imperative style to functional style is to abstract the operation to handle the data-structure, and use high-order function like map or fold/reduce to handle the data-structure like the following example   1(defn add-to-trie [trie x] 2  (assoc-in trie x (merge (get-in trie x) {:val x :terminal true}))) 3  4(defn build-trie [coll trie] 5  “Build a trie over the values in the specified seq coll.” 6  (reduce add-to-trie trie coll))    The above Clojure code use an collection to store some words and use reduce  to build a trie. This is perfectly functional style without state change of variable.   You may also read some good books on functional programming(I highl recommend SICP which also has free edition online and teaching videos). Or you can do some challenge programming in one functional language, for this 4clojure - Welcome! is a perfect place for clojure programmer, it require you to implement some programming tasks(such as group-by  in the core-language of Clojure), after you finish more and more of the exercise, I think you will be better and better in programming in thinking in a functional style.<br><br>Answer by Yushi Wang:<blockquote>When I first learn functional programming, it seems weird to program without variables and the operation to update variables. But in fact, 90% of the time, you can use functional style to programming without the change of state, and at most time, it is much better in the functional style.<br><br>But when you program in functional language more and more, it will show that it is more nature to program in this style(with high-order functions like map, filter, foldl, foldr etc.). <br><br>To me,  one key experience to change from imperative style to functional style is to abstract the operation to handle the data-structure, and use high-order function like map or fold/reduce to handle the data-structure like the following example<br><br><br><pre class=\"prettyprint linenums\">(defn add-to-trie [trie x]\n  (assoc-in trie x (merge (get-in trie x) {:val x :terminal true})))\n\n(defn build-trie [coll trie]\n  \"Build a trie over the values in the specified seq coll.\"\n  (reduce add-to-trie trie coll))\n</pre><br><br>The above <span class=\"qlink_container\"><a href=\"http://www.clojure.com/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"clojure.com\")'>Clojure</a></span> code use an collection to store some words and use <pre class=\"prettyprint inline\">reduce</pre> to build a trie. This is perfectly functional style without state change of variable. <br><br>You may also read some good books on functional programming(I highl recommend <a href=\"http://mitpress.mit.edu/sicp/\" rel=\"noreferrer\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"mit.edu\")'>SICP</a> which also has free edition online and teaching videos). Or you can do some challenge programming in one functional language, for this <a href=\"http://www.4clojure.com/\" rel=\"noreferrer nofollow\" target=\"_blank\" class=\"external_link\" onmouseover='return require(\"qtext\").tooltip(this, \"4clojure.com\")'>4clojure - Welcome!</a> is a perfect place for clojure programmer, it require you to implement some programming tasks(such as <pre class=\"prettyprint inline\">group-by</pre> in the core-language of Clojure), after you finish more and more of the exercise, I think you will be better and better in programming in thinking in a functional style.</blockquote><a href=\"https://www.quora.com/How-can-I-learn-to-think-like-a-functional-programmer/answer/Yushi-Wang-1\" target=\"_blank\">How can I learn to think like a functional programmer?</a></p>","content":"<p><p>Answer on @Quora by @m00nlight223 to How can I learn to think like a functional programmer?&nbsp; To me,&nbsp; one key experience to change from imperative style to functional style is to abstract the operation to handle the data-structure, and use high-order function like map or fold/reduce to handle the data-structure like the following example&nbsp;&nbsp; 1(defn add-to-trie [trie x] 2&nbsp; (assoc-in trie x (merge (get-in trie x) {:val x :terminal true}))) 3&nbsp; 4(defn build-trie [coll trie] 5&nbsp; &ldquo;Build a trie over the values in the specified seq coll.&rdquo; 6&nbsp; (reduce add-to-trie trie coll))&nbsp;&nbsp;&nbsp; The above Clojure code use an collection to store some words and use reduce&nbsp; to build a trie. This is perfectly functional style without state change of variable.&nbsp;&nbsp; You may also read some good books on functional programming(I highl recommend SICP which also has free edition online and teaching videos). Or you can do some challenge programming in one functional language, for this 4clojure - Welcome! is a perfect place for clojure programmer, it require you to implement some programming tasks(such as group-by&nbsp; in the core-language of Clojure), after you finish more and more of the exercise, I think you will be better and better in programming in thinking in a functional style.<br /><br />Answer by Yushi Wang:</p><blockquote><p>When I first learn functional programming, it seems weird to program without variables and the operation to update variables. But in fact, 90% of the time, you can use functional style to programming without the change of state, and at most time, it is much better in the functional style.<br /><br />But when you program in functional language more and more, it will show that it is more nature to program in this style(with high-order functions like map, filter, foldl, foldr etc.). <br /><br />To me,&nbsp; one key experience to change from imperative style to functional style is to abstract the operation to handle the data-structure, and use high-order function like map or fold/reduce to handle the data-structure like the following example<br /><br /><br /><pre>(defn add-to-trie [trie x]\n  (assoc-in trie x (merge (get-in trie x) {:val x :terminal true})))\n\n(defn build-trie [coll trie]\n  \"Build a trie over the values in the specified seq coll.\"\n  (reduce add-to-trie trie coll))\n</pre><br /><br />The above <a href=\"http://www.clojure.com/\" target=\"_blank\">Clojure</a> code use an collection to store some words and use <pre>reduce</pre> to build a trie. This is perfectly functional style without state change of variable. <br /><br />You may also read some good books on functional programming(I highl recommend <a href=\"http://mitpress.mit.edu/sicp/\" target=\"_blank\">SICP</a> which also has free edition online and teaching videos). Or you can do some challenge programming in one functional language, for this <a href=\"http://www.4clojure.com/\" target=\"_blank\">4clojure - Welcome!</a> is a perfect place for clojure programmer, it require you to implement some programming tasks(such as <pre>group-by</pre> in the core-language of Clojure), after you finish more and more of the exercise, I think you will be better and better in programming in thinking in a functional style.</p></blockquote><a href=\"https://www.quora.com/How-can-I-learn-to-think-like-a-functional-programmer/answer/Yushi-Wang-1\" target=\"_blank\">How can I learn to think like a functional programmer?</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true}],"total_posts":1035,"_links":{"next":{"href":"/v2/blog/tyb.tumblr.com/posts/text?type=text&offset=20&page_number=2","method":"GET","query_params":{"type":"text","offset":"20","page_number":"2"}}}}}
